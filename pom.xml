<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.beast2</groupId>
    <artifactId>beast2lang</artifactId>
    <version>0.1.0-SNAPSHOT</version>

    <name>Beast2Lang</name>
    <description>A concise model definition language for Beast2 that translates to and from PhyloSpec/ModelPhy</description>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <antlr4.version>4.12.0</antlr4.version>
        <maven.compiler.release>11</maven.compiler.release>
    </properties>

    <dependencies>
        <!-- ANTLR4 runtime -->
        <dependency>
            <groupId>org.antlr</groupId>
            <artifactId>antlr4-runtime</artifactId>
            <version>${antlr4.version}</version>
        </dependency>
        
        <!-- JSON library -->
        <dependency>
            <groupId>org.json</groupId>
            <artifactId>json</artifactId>
            <version>20230618</version>
        </dependency>
        
        <!-- Command line parsing -->
        <dependency>
            <groupId>info.picocli</groupId>
            <artifactId>picocli</artifactId>
            <version>4.7.4</version>
        </dependency>
        
        <!-- Testing -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.2</version>
            <scope>test</scope>
        </dependency>
    
    <dependency>
        <groupId>beast2</groupId>
        <artifactId>beast-base</artifactId>
        <version>2.7.5</version>
    </dependency>
    <dependency>
        <groupId>beast2</groupId>
        <artifactId>beast-app</artifactId>
        <version>2.7.5</version>
    </dependency>
    <dependency>
        <groupId>beast2</groupId>
        <artifactId>beast-launcher</artifactId>
        <version>2.7.5</version>
    </dependency>
    </dependencies>


    <build>
        <plugins>
        
        <!-- Plugin to generate the command-line script -->
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-antrun-plugin</artifactId>
    <version>3.1.0</version>
    <executions>
        <execution>
            <id>create-shell-script</id>
            <phase>package</phase>
            <goals>
                <goal>run</goal>
            </goals>
            <configuration>
                <target>
                    <echo file="${project.build.directory}/beast2lang">#!/bin/sh
# Determine the location of this script
if [ -z "$SCRIPT_LOCATION" ]; then
    ## resolve links - $0 may be a link to application
    PRG="$0"
    # need this for relative symlinks
    while [ -h "$PRG" ]; do
        ls=`ls -ld "$PRG"`
        link=`expr "$ls" : '.*-> \(.*\)$'`
        if expr "$link" : '/.*' > /dev/null; then
            PRG="$link"
        else
            PRG="`dirname "$PRG"`/$link"
        fi
    done
    saveddir=`pwd`
    SCRIPT_LOCATION=`dirname "$PRG"`
    cd "$saveddir"
fi

# Find BEAST 2.7.x installation
if [ -z "$BEAST" ]; then
    # macOS Applications directory - look for any BEAST 2.7.x
    if [ -d "/Applications" ]; then
        BEAST_DIR=$(find /Applications -maxdepth 1 -type d -name "BEAST 2.7*" | sort -r | head -n 1)
        if [ ! -z "$BEAST_DIR" ]; then
            BEAST="$BEAST_DIR"
        fi
    fi
    
    # Home Applications directory - look for any BEAST 2.7.x
    if [ -z "$BEAST" ] &amp;&amp; [ -d "$HOME/Applications" ]; then
        BEAST_DIR=$(find $HOME/Applications -maxdepth 1 -type d -name "BEAST 2.7*" | sort -r | head -n 1)
        if [ ! -z "$BEAST_DIR" ]; then
            BEAST="$BEAST_DIR"
        fi
    fi
    
    # Check specific version as fallback
    if [ -z "$BEAST" ]; then
        if [ -d "/Applications/BEAST 2.7.5" ]; then
            BEAST="/Applications/BEAST 2.7.5"
        elif [ -d "$HOME/Applications/BEAST 2.7.5" ]; then
            BEAST="$HOME/Applications/BEAST 2.7.5"
        elif [ -d "/usr/local/share/beast" ]; then
            # Check if this is a 2.7.x version in /usr/local/share/beast
            if [ -f "/usr/local/share/beast/lib/version.xml" ]; then
                VERSION=$(grep "2.7" "/usr/local/share/beast/lib/version.xml")
                if [ ! -z "$VERSION" ]; then
                    BEAST="/usr/local/share/beast"
                fi
            else
                BEAST="/usr/local/share/beast"
            fi
        fi
    fi
    
    # If we still can't find BEAST 2.7.x, try to fall back to bundled dependencies
    if [ -z "$BEAST" ]; then
        echo "BEAST 2.7.x installation not found. Using bundled dependencies."
        BEAST="bundled"
    else
        echo "Found BEAST installation at: $BEAST"
    fi
fi

# Set Java
JAVA="java"
if [ "$BEAST" != "bundled" ] &amp;&amp; [ -x "${BEAST}/jre/bin/java" ]; then
    JAVA="${BEAST}/jre/bin/java"
fi

# Set classpath with BEAST JARs
CP="${SCRIPT_LOCATION}/beast2lang-0.1.0-SNAPSHOT-jar-with-dependencies.jar"
if [ "$BEAST" != "bundled" ]; then
    # Add all BEAST JARs to classpath
    for jar in ${BEAST}/lib/*.jar; do
        CP="${CP}:${jar}"
    done
    # Add package JARs
    if [ -d "${BEAST}/lib/packages" ]; then
        for jar in ${BEAST}/lib/packages/*.jar; do
            CP="${CP}:${jar}"
        done
    fi
fi

# Run the application
"$JAVA" -Dlauncher.wait.for.exit=true -Xss256m -Xmx4g -Dbeast.user.package.dir=user.pkgs -cp "$CP" org.beast2.modelLanguage.Beast2Lang "$@"
</echo>
                    <chmod file="${project.build.directory}/beast2lang" perm="755"/>
                </target>
            </configuration>
        </execution>
    </executions>
</plugin>

<!-- Plugin to create an executable JAR with dependencies -->
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-assembly-plugin</artifactId>
    <version>3.4.2</version>
    <executions>
        <execution>
            <id>make-assembly</id>
            <phase>package</phase>
            <goals>
                <goal>single</goal>
            </goals>
            <configuration>
                <descriptorRefs>
                    <descriptorRef>jar-with-dependencies</descriptorRef>
                </descriptorRefs>
                <archive>
                    <manifest>
                        <mainClass>org.beast2.modelLanguage.Beast2Lang</mainClass>
                    </manifest>
                </archive>
            </configuration>
        </execution>
    </executions>
</plugin>

            <!-- ANTLR4 plugin -->
<plugin>
    <groupId>org.antlr</groupId>
    <artifactId>antlr4-maven-plugin</artifactId>
    <version>${antlr4.version}</version>
    <executions>
        <execution>
            <id>antlr</id>
            <goals>
                <goal>antlr4</goal>
            </goals>
            <configuration>
                <sourceDirectory>${project.basedir}/src/main/antlr4</sourceDirectory>
                <outputDirectory>${project.build.directory}/generated-sources/antlr4</outputDirectory>
                <visitor>true</visitor>
                <listener>true</listener>
                <treatWarningsAsErrors>false</treatWarningsAsErrors>
                <arguments>
                    <argument>-package</argument>
                    <argument>org.beast2.modelLanguage.parser</argument>
                </arguments>
            </configuration>
        </execution>
    </executions>
</plugin>            
            <!-- Maven Compiler Plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.13.0</version>
                <configuration>
                    <release>${maven.compiler.release}</release>
                </configuration>
            </plugin>
            
            <!-- Maven Shade Plugin for creating executable jar -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.4.1</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <transformers>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>org.beast2.modelLanguage.Beast2Lang</mainClass>
                                </transformer>
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            
            <!-- Maven Surefire Plugin for running tests -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.1.2</version>
            </plugin>
        </plugins>
    </build>
</project>