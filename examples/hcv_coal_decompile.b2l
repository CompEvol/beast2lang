requires BEAST.base;

@data
Alignment hcv = nexus(file="hcv.nex");
IntegerParameter bGroupSizes_t_hcv ~ RandomComposition(n=62, k=4);
RealParameter gammaShape_s_hcv ~ Exponential(mean=1.0, lower=0.1);
RealParameter rateAC_s_hcv ~ Gamma(alpha=0.05, beta=10.0);
RealParameter rateAG_s_hcv ~ Gamma(alpha=0.05, beta=20.0);
RealParameter rateAT_s_hcv ~ Gamma(alpha=0.05, beta=10.0);
RealParameter rateCG_s_hcv ~ Gamma(alpha=0.05, beta=10.0);
RealParameter rateGT_s_hcv ~ Gamma(alpha=0.05, beta=10.0);
RealParameter freqParameter_s_hcv ~ Dirichlet(alpha=[4.0, 4.0, 4.0, 4.0]);
RealParameter bPopSizes_t_hcv ~ MarkovChainDistribution(jeffreys=true, lower=0.0);
TaxonSet TaxonSet_hcv = TaxonSet(alignment=hcv);
Frequencies estimatedFreqs_s_hcv = Frequencies(frequencies=freqParameter_s_hcv);
StrictClockModel StrictClock_c_hcv = StrictClockModel(clock.rate=7.9E-4);
GTR gtr_s_hcv = GTR(rateCG=rateCG_s_hcv, rateAG=rateAG_s_hcv, rateCT=1.0, rateAT=rateAT_s_hcv, rateAC=rateAC_s_hcv, rateGT=rateGT_s_hcv, frequencies=estimatedFreqs_s_hcv);
SiteModel SiteModel_s_hcv = SiteModel(proportionInvariant=0.0, shape=gammaShape_s_hcv, mutationRate=1.0, gammaCategoryCount=4, substModel=gtr_s_hcv);
Tree Tree_t_hcv ~ BayesianSkyline(groupSizes=bGroupSizes_t_hcv, popSizes=bPopSizes_t_hcv, treeIntervals=BSPTreeIntervals_t_hcv);
ThreadedTreeLikelihood treeLikelihood_hcv = ThreadedTreeLikelihood(data=hcv, siteModel=SiteModel_s_hcv, tree=Tree_t_hcv, branchRateModel=StrictClock_c_hcv);
@observed(data=hcv)
Alignment alignment_hcv ~ TreeLikelihood(siteModel=SiteModel_s_hcv, tree=Tree_t_hcv, branchRateModel=StrictClock_c_hcv);
