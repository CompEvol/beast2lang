import beast.base.inference.parameter.*;
import beast.base.inference.distribution.*;
import beast.base.evolution.tree.*;
import beast.base.evolution.tree.coalescent.*;
import beast.base.evolution.substitutionmodel.*;
import beast.base.evolution.alignment.*;
import beast.base.evolution.likelihood.*;
import beast.base.evolution.branchratemodel.*;


Alignment alignment_data = nexus(file="RSV2.nex");
@data
Alignment codon1 = FilteredAlignment(data=alignment_data, filter="3-629\3");
@data
Alignment codon2 = FilteredAlignment(data=alignment_data, filter="1-629\3");
@data
Alignment codon3 = FilteredAlignment(data=alignment_data, filter="2-629\3");

Alignment allpartitions = [codon1, codon2, codon3];

RealParameter kappa ~ LogNormalDistributionModel(M=1, S=0.5);
Double[] alpha = [2.0, 2.0, 2.0, 2.0];

RealParameter[] freqs ~ Dirichlet(alpha=alpha, replicates=3);
HKY[] hky = HKY(kappa=kappa, frequencies=freqs);

RealParameter theta ~ LogNormalDistributionModel(M=3, S=2);
PopulationFunction popFunc = ConstantPopulation(popSize=theta);
Tree tree ~ Coalescent(populationModel=popFunc);

RealParameter clockRate ~ LogNormalDistributionModel(M=-5, S=1.25);
StrictClockModel clockModel = StrictClockModel(clock.rate=clockRate);

@observed(data=allpartitions)
Alignment[] alignment ~ TreeLikelihood(tree=tree, siteModel=hky, branchRateModel=clockModel);