requires BEAST.base;
requires feast;
requires BEASTLabs;


// TODO use feast
Alignment alignment_data = nexus(file="RSV2.nex");
@data
Alignment codon1 = FilteredAlignment(data=alignment_data, filter="3-629\3");
@data
Alignment codon2 = FilteredAlignment(data=alignment_data, filter="1-629\3");
@data
Alignment codon3 = FilteredAlignment(data=alignment_data, filter="2-629\3");

@data
TaxonSet taxa = TaxonSet(alignment=alignment_data);

// the earliest AUSA2s61=41.0
TraitSet traitSet = TraitSetFromTaxonSet(delimiter="s", everythingAfterLast="true",
                            traitname="date", dateFormat="yy", taxa=taxa);

// unlink subst models
RealParameter kappa1 ~ LogNormalDistributionModel(M=1, S=0.5);
RealParameter freqs1 ~ Dirichlet(alpha=[2.0, 2.0, 2.0, 2.0]);
HKY hky1 = HKY(kappa=kappa1, frequencies=freqs1);

RealParameter kappa2 ~ LogNormalDistributionModel(M=1, S=0.5);
RealParameter freqs2 ~ Dirichlet(alpha=[2.0, 2.0, 2.0, 2.0]);
HKY hky2 = HKY(kappa=kappa2, frequencies=freqs2);

RealParameter kappa3 ~ LogNormalDistributionModel(M=1, S=0.5);
RealParameter freqs3 ~ Dirichlet(alpha=[2.0, 2.0, 2.0, 2.0]);
HKY hky3 = HKY(kappa=kappa3, frequencies=freqs3);

// TODO the value will be replaced to 0.5, but it needs some values here
// 3 relative rates
RealParameter r_1 ~ RealParameter(value=1.0);
RealParameter r_2 ~ RealParameter(value=1.0);
RealParameter r_3 ~ RealParameter(value=1.0);
Function r = Concatenate(arg=[r_1, r_2, r_3]);
//TODO if r exists, then the type may not be required here
Function r ~ WeightedDirichlet(alpha=[1.0, 1.0, 1.0], weights=[209, 210, 210]);

SiteModel siteModel1 = SiteModel(substModel=hky1, mutationRate=r_1);
SiteModel siteModel2 = SiteModel(substModel=hky2, mutationRate=r_2);
SiteModel siteModel3 = SiteModel(substModel=hky3, mutationRate=r_3);

// link tree
RealParameter theta ~ LogNormalDistributionModel(M=3, S=2);
PopulationFunction popFunc = ConstantPopulation(popSize=theta);
// trait= takes 2nd order inputs
Tree tree ~ Coalescent(populationModel=popFunc, taxonset=alignment_data, trait=traitSet);

RealParameter clockRate ~ LogNormalDistributionModel(M=-5, S=1.25);
StrictClockModel clockModel = StrictClockModel(clock.rate=clockRate);

@observed(data=codon1)
Alignment codon1 ~ TreeLikelihood(siteModel=siteModel1, tree=tree, branchRateModel=clockModel);
@observed(data=codon2)
Alignment codon2 ~ TreeLikelihood(siteModel=siteModel2, tree=tree, branchRateModel=clockModel);
@observed(data=codon3)
Alignment codon3 ~ TreeLikelihood(siteModel=siteModel3, tree=tree, branchRateModel=clockModel);
