requires BEAST.base;
requires feast;
requires BEASTLabs;


@data
Alignment hcv = AlignmentFromNexus(fileName="hcv.nexus");

// subst models
RealParameter rates ~ Dirichlet(conc=[1.0, 2.0, 1.0, 1.0, 2.0, 1.0]);
RealParameter freqs ~ Dirichlet(alpha=[2.0, 2.0, 2.0, 2.0]);
GTR gtr = GTR(rates=rates, frequencies=freqs);

// TODO: can I do this? 2nd layer of inputs from RealParameter
RealParameter popSizes ~ MarkovChainDistribution(dimension=4, keys="1 2 3 4");
// link tree
Function theta1 = Slice(arg=popSizes, index=0);
Function theta1 ~ LogNormalDistributionModel(M=9, S=2);

// numGroups = 4; w = taxa.length()-1; NTAX=63
//TODO no RandomComposition yet
// Samples a random k-tuple of positive integers that sum to n.
IntegerParameter groupSizes ~ RandomCompositionPositive(k=4, n=62);

Tree tree ~ BayesianSkyline(popSizes=popSizes, groupSizes=groupSizes);

// TODO parse 7.9E-4
// fix to 0.00079 s/s/y
StrictClockModel strictClock = StrictClockModel(clock.rate=0.00079);

@observed(data=hcv)
Alignment alignment ~ TreeLikelihood(siteModel=gtr, tree=tree, branchRateModel=strictClock);

