{
  "modelLibrary": {
    "name": "BEAST2 Core Library",
    "version": "1.0.0",
    "engine": "BEAST2",
    "engineVersion": "2.7.7",
    "description": "Core model components for BEAST2",
    "components": [
      {
        "name": "BEASTInterface",
        "fullyQualifiedName": "beast.base.core.BEASTInterface",
        "isDistribution": false,
        "isAbstract": true,
        "isInterface": true,
        "isEnum": false,
        "package": "beast.base.core",
        "description": "BEAST2 BEASTInterface",
        "implements": [],
        "arguments": [],
        "properties": []
      },
      {
        "name": "BEASTObject",
        "fullyQualifiedName": "beast.base.core.BEASTObject",
        "isDistribution": false,
        "isAbstract": true,
        "isInterface": false,
        "isEnum": false,
        "package": "beast.base.core",
        "description": "BEAST2 BEASTObject",
        "implements": [
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [],
        "properties": []
      },
      {
        "name": "Distribution",
        "fullyQualifiedName": "beast.base.inference.Distribution",
        "isDistribution": true,
        "isAbstract": true,
        "isInterface": false,
        "isEnum": false,
        "package": "beast.base.inference",
        "description": "BEAST2 Distribution",
        "extends": "beast.base.inference.CalculationNode",
        "implements": [
          "beast.base.core.Loggable",
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [],
        "properties": []
      },
      {
        "name": "ParametricDistribution",
        "fullyQualifiedName": "beast.base.inference.distribution.ParametricDistribution",
        "isDistribution": true,
        "isAbstract": true,
        "isInterface": false,
        "isEnum": false,
        "package": "beast.base.inference.distribution",
        "description": "BEAST2 ParametricDistribution",
        "extends": "beast.base.inference.CalculationNode",
        "implements": [
          "beast.base.core.BEASTInterface",
          "org.apache.commons.math.distribution.ContinuousDistribution",
          "org.apache.commons.math.distribution.Distribution"
        ],
        "arguments": [],
        "properties": []
      },
      {
        "name": "StateNode",
        "fullyQualifiedName": "beast.base.inference.StateNode",
        "isDistribution": false,
        "isAbstract": true,
        "isInterface": false,
        "isEnum": false,
        "package": "beast.base.inference",
        "description": "BEAST2 StateNode",
        "extends": "beast.base.inference.CalculationNode",
        "implements": [
          "beast.base.core.Loggable",
          "java.lang.Cloneable",
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [],
        "properties": []
      },
      {
        "name": "StateNodeInitialiser",
        "fullyQualifiedName": "beast.base.inference.StateNodeInitialiser",
        "isDistribution": false,
        "isAbstract": true,
        "isInterface": true,
        "isEnum": false,
        "package": "beast.base.inference",
        "description": "BEAST2 StateNodeInitialiser",
        "implements": [],
        "arguments": [],
        "properties": []
      },
      {
        "name": "TreeDistribution",
        "fullyQualifiedName": "beast.base.evolution.tree.TreeDistribution",
        "isDistribution": true,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "beast.base.evolution.tree",
        "description": "BEAST2 TreeDistribution",
        "extends": "beast.base.inference.Distribution",
        "implements": [
          "beast.base.core.Loggable",
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface"
        ],
        "primaryArgument": {
          "name": "tree",
          "type": "TreeInterface",
          "description": "tree over which to calculate a prior or likelihood",
          "required": false
        },
        "arguments": [
          {
            "name": "treeIntervals",
            "type": "TreeIntervals",
            "description": "Intervals for a phylogenetic beast tree",
            "required": false
          }
        ],
        "properties": [
          {
            "name": "conditions",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "arguments",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "currentLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "stochastic",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "storedLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "nonStochasticLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "SpeciesTreeDistribution",
        "fullyQualifiedName": "beast.base.evolution.speciation.SpeciesTreeDistribution",
        "isDistribution": true,
        "isAbstract": true,
        "isInterface": false,
        "isEnum": false,
        "package": "beast.base.evolution.speciation",
        "description": "BEAST2 SpeciesTreeDistribution",
        "extends": "beast.base.evolution.tree.TreeDistribution",
        "implements": [
          "beast.base.core.Loggable",
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [],
        "properties": []
      },
      {
        "name": "BranchRateModel.Base",
        "fullyQualifiedName": "beast.base.evolution.branchratemodel.BranchRateModel$Base",
        "isDistribution": false,
        "isAbstract": true,
        "isInterface": false,
        "isEnum": false,
        "package": "beast.base.evolution.branchratemodel",
        "description": "Inner type of BranchRateModel",
        "extends": "beast.base.inference.CalculationNode",
        "implements": [
          "beast.base.evolution.branchratemodel.BranchRateModel",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [],
        "properties": []
      },
      {
        "name": "SubstitutionModel.Base",
        "fullyQualifiedName": "beast.base.evolution.substitutionmodel.SubstitutionModel$Base",
        "isDistribution": false,
        "isAbstract": true,
        "isInterface": false,
        "isEnum": false,
        "package": "beast.base.evolution.substitutionmodel",
        "description": "Inner type of SubstitutionModel",
        "extends": "beast.base.inference.CalculationNode",
        "implements": [
          "beast.base.evolution.substitutionmodel.SubstitutionModel",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [],
        "properties": []
      },
      {
        "name": "DataType.Base",
        "fullyQualifiedName": "beast.base.evolution.datatype.DataType$Base",
        "isDistribution": false,
        "isAbstract": true,
        "isInterface": false,
        "isEnum": false,
        "package": "beast.base.evolution.datatype",
        "description": "Inner type of DataType",
        "extends": "beast.base.core.BEASTObject",
        "implements": [
          "beast.base.evolution.datatype.DataType",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [],
        "properties": []
      },
      {
        "name": "Function",
        "fullyQualifiedName": "beast.base.core.Function",
        "isDistribution": false,
        "isAbstract": true,
        "isInterface": true,
        "isEnum": false,
        "package": "beast.base.core",
        "description": "BEAST2 Function",
        "implements": [],
        "arguments": [],
        "properties": []
      },
      {
        "name": "SiteModelInterface",
        "fullyQualifiedName": "beast.base.evolution.sitemodel.SiteModelInterface",
        "isDistribution": false,
        "isAbstract": true,
        "isInterface": true,
        "isEnum": false,
        "package": "beast.base.evolution.sitemodel",
        "description": "BEAST2 SiteModelInterface",
        "implements": [],
        "arguments": [],
        "properties": []
      },
      {
        "name": "Parameter",
        "fullyQualifiedName": "beast.base.inference.parameter.Parameter",
        "isDistribution": false,
        "isAbstract": true,
        "isInterface": true,
        "isEnum": false,
        "package": "beast.base.inference.parameter",
        "description": "BEAST2 Parameter",
        "implements": [
          "beast.base.core.Function"
        ],
        "arguments": [],
        "properties": []
      },
      {
        "name": "TreeInterface",
        "fullyQualifiedName": "beast.base.evolution.tree.TreeInterface",
        "isDistribution": false,
        "isAbstract": true,
        "isInterface": true,
        "isEnum": false,
        "package": "beast.base.evolution.tree",
        "description": "BEAST2 TreeInterface",
        "implements": [],
        "arguments": [],
        "properties": []
      },
      {
        "name": "BranchRateModel",
        "fullyQualifiedName": "beast.base.evolution.branchratemodel.BranchRateModel",
        "isDistribution": false,
        "isAbstract": true,
        "isInterface": true,
        "isEnum": false,
        "package": "beast.base.evolution.branchratemodel",
        "description": "BEAST2 BranchRateModel",
        "implements": [],
        "arguments": [],
        "properties": []
      },
      {
        "name": "SubstitutionModel",
        "fullyQualifiedName": "beast.base.evolution.substitutionmodel.SubstitutionModel",
        "isDistribution": false,
        "isAbstract": true,
        "isInterface": true,
        "isEnum": false,
        "package": "beast.base.evolution.substitutionmodel",
        "description": "BEAST2 SubstitutionModel",
        "implements": [],
        "arguments": [],
        "properties": []
      },
      {
        "name": "PopulationFunction",
        "fullyQualifiedName": "beast.base.evolution.tree.coalescent.PopulationFunction",
        "isDistribution": false,
        "isAbstract": true,
        "isInterface": true,
        "isEnum": false,
        "package": "beast.base.evolution.tree.coalescent",
        "description": "BEAST2 PopulationFunction",
        "implements": [
          "org.apache.commons.math.analysis.UnivariateRealFunction"
        ],
        "arguments": [],
        "properties": []
      },
      {
        "name": "Distance",
        "fullyQualifiedName": "beast.base.evolution.distance.Distance",
        "isDistribution": false,
        "isAbstract": true,
        "isInterface": true,
        "isEnum": false,
        "package": "beast.base.evolution.distance",
        "description": "BEAST2 Distance",
        "implements": [],
        "arguments": [],
        "properties": []
      },
      {
        "name": "TreeMetric",
        "fullyQualifiedName": "beast.base.evolution.tree.TreeMetric",
        "isDistribution": false,
        "isAbstract": true,
        "isInterface": true,
        "isEnum": false,
        "package": "beast.base.evolution.tree",
        "description": "BEAST2 TreeMetric",
        "implements": [],
        "arguments": [],
        "properties": []
      },
      {
        "name": "SiteModelInterface.Base",
        "fullyQualifiedName": "beast.base.evolution.sitemodel.SiteModelInterface$Base",
        "isDistribution": false,
        "isAbstract": true,
        "isInterface": false,
        "isEnum": false,
        "package": "beast.base.evolution.sitemodel",
        "description": "Inner type of SiteModelInterface",
        "extends": "beast.base.inference.CalculationNode",
        "implements": [
          "beast.base.core.BEASTInterface",
          "beast.base.evolution.sitemodel.SiteModelInterface"
        ],
        "arguments": [],
        "properties": []
      },
      {
        "name": "Parameter.Base",
        "fullyQualifiedName": "beast.base.inference.parameter.Parameter$Base",
        "isDistribution": false,
        "isAbstract": true,
        "isInterface": false,
        "isEnum": false,
        "package": "beast.base.inference.parameter",
        "description": "Inner type of Parameter",
        "extends": "beast.base.inference.StateNode",
        "implements": [
          "beast.base.core.Loggable",
          "java.lang.Cloneable",
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface",
          "beast.base.inference.parameter.Parameter"
        ],
        "arguments": [],
        "properties": []
      },
      {
        "name": "Function.Constant",
        "fullyQualifiedName": "beast.base.core.Function$Constant",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "Inner type of Function",
        "extends": "beast.base.core.BEASTObject",
        "implements": [
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "value",
            "type": "String",
            "description": "Space delimited string of double values",
            "required": true
          }
        ],
        "properties": [
          {
            "name": "value",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "VirtualBEASTObject",
        "fullyQualifiedName": "beast.base.core.VirtualBEASTObject",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 VirtualBEASTObject",
        "extends": "beast.base.core.BEASTObject",
        "implements": [
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [],
        "properties": []
      },
      {
        "name": "Alignment",
        "fullyQualifiedName": "beast.base.evolution.alignment.Alignment",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 Alignment",
        "extends": "beast.base.inference.parameter.Map",
        "implements": [
          "beast.base.core.Loggable",
          "java.lang.Cloneable",
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "sequence",
            "type": "List<Sequence>",
            "description": "sequence and meta data for particular taxon",
            "required": false,
            "default": "[]"
          },
          {
            "name": "taxa",
            "type": "TaxonSet",
            "description": "An optional taxon-set used only to sort the sequences into the same order as they appear in the taxon-set.",
            "required": false,
            "default": "\tnull\n"
          },
          {
            "name": "statecount",
            "type": "Integer",
            "description": "maximum number of states in all sequences",
            "required": false,
            "constraint": "positive-integer"
          },
          {
            "name": "dataType",
            "type": "String",
            "description": "data type, one of {aminoacid=aminoacid, binary=binary, integer=integer, nucleotide=nucleotide, standard=standard, twoStateCovarion=twoStateCovarion, user defined=user defined}",
            "required": false,
            "default": "nucleotide"
          },
          {
            "name": "userDataType",
            "type": "DataType.Base",
            "description": "non-standard, user specified data type, if specified 'dataType' is ignored",
            "required": false
          },
          {
            "name": "strip",
            "type": "Boolean",
            "description": "sets weight to zero for sites that are invariant (e.g. all 1, all A or all unkown)",
            "required": false,
            "default": "false"
          },
          {
            "name": "weights",
            "type": "String",
            "description": "comma separated list of weights, one for each site in the sequences. If not specified, each site has weight 1",
            "required": false
          },
          {
            "name": "ascertained",
            "type": "Boolean",
            "description": "is true if the alignment allows ascertainment correction, i.e., conditioning the Felsenstein likelihood on excluding constant sites from the alignment",
            "required": false,
            "default": "false"
          },
          {
            "name": "excludefrom",
            "type": "Integer",
            "description": "first site to condition on, default 0",
            "required": false,
            "default": "0"
          },
          {
            "name": "excludeto",
            "type": "Integer",
            "description": "last site to condition on (but excluding this site), default 0",
            "required": false,
            "default": "0"
          },
          {
            "name": "excludeevery",
            "type": "Integer",
            "description": "interval between sites to condition on (default 1)",
            "required": false,
            "default": "1"
          },
          {
            "name": "includefrom",
            "type": "Integer",
            "description": "first site to condition on, default 0",
            "required": false,
            "default": "0"
          },
          {
            "name": "includeto",
            "type": "Integer",
            "description": "last site to condition on, default 0",
            "required": false,
            "default": "0"
          },
          {
            "name": "includeevery",
            "type": "Integer",
            "description": "interval between sites to condition on (default 1)",
            "required": false,
            "default": "1"
          },
          {
            "name": "*",
            "type": "Map",
            "description": "Input containing the map",
            "required": false,
            "default": "{}"
          },
          {
            "name": "estimate",
            "type": "Boolean",
            "description": "whether to estimate this item or keep constant to its initial value",
            "required": false,
            "default": "true"
          }
        ],
        "properties": [
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "taxaNames",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "taxonCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "maxStateCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "patternCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "siteCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "stateCounts",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "excludedPatternIndices",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "excludedPatternCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "weights",
            "type": "int[]",
            "access": "read-only"
          },
          {
            "name": "nrTaxa",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "counts",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "types",
            "type": "TreeMap",
            "access": "read-only"
          },
          {
            "name": "dataType",
            "type": "DataType",
            "access": "read-only"
          },
          {
            "name": "state",
            "type": "State",
            "access": "read-only"
          },
          {
            "name": "index",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "estimated",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "current",
            "type": "StateNode",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "AscertainedAlignment",
        "fullyQualifiedName": "beast.base.evolution.alignment.AscertainedAlignment",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 AscertainedAlignment",
        "extends": "beast.base.evolution.alignment.Alignment",
        "implements": [
          "beast.base.core.Loggable",
          "java.lang.Cloneable",
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "sequence",
            "type": "List<Sequence>",
            "description": "sequence and meta data for particular taxon",
            "required": false,
            "default": "[]"
          },
          {
            "name": "taxa",
            "type": "TaxonSet",
            "description": "An optional taxon-set used only to sort the sequences into the same order as they appear in the taxon-set.",
            "required": false,
            "default": "\tnull\n"
          },
          {
            "name": "statecount",
            "type": "Integer",
            "description": "maximum number of states in all sequences",
            "required": false,
            "constraint": "positive-integer"
          },
          {
            "name": "dataType",
            "type": "String",
            "description": "data type, one of {aminoacid=aminoacid, binary=binary, integer=integer, nucleotide=nucleotide, standard=standard, twoStateCovarion=twoStateCovarion, user defined=user defined}",
            "required": false,
            "default": "nucleotide"
          },
          {
            "name": "userDataType",
            "type": "DataType.Base",
            "description": "non-standard, user specified data type, if specified 'dataType' is ignored",
            "required": false
          },
          {
            "name": "strip",
            "type": "Boolean",
            "description": "sets weight to zero for sites that are invariant (e.g. all 1, all A or all unkown)",
            "required": false,
            "default": "false"
          },
          {
            "name": "weights",
            "type": "String",
            "description": "comma separated list of weights, one for each site in the sequences. If not specified, each site has weight 1",
            "required": false
          },
          {
            "name": "ascertained",
            "type": "Boolean",
            "description": "is true if the alignment allows ascertainment correction, i.e., conditioning the Felsenstein likelihood on excluding constant sites from the alignment",
            "required": false,
            "default": "false"
          },
          {
            "name": "excludefrom",
            "type": "Integer",
            "description": "first site to condition on, default 0",
            "required": false,
            "default": "0"
          },
          {
            "name": "excludeto",
            "type": "Integer",
            "description": "last site to condition on (but excluding this site), default 0",
            "required": false,
            "default": "0"
          },
          {
            "name": "excludeevery",
            "type": "Integer",
            "description": "interval between sites to condition on (default 1)",
            "required": false,
            "default": "1"
          },
          {
            "name": "includefrom",
            "type": "Integer",
            "description": "first site to condition on, default 0",
            "required": false,
            "default": "0"
          },
          {
            "name": "includeto",
            "type": "Integer",
            "description": "last site to condition on, default 0",
            "required": false,
            "default": "0"
          },
          {
            "name": "includeevery",
            "type": "Integer",
            "description": "interval between sites to condition on (default 1)",
            "required": false,
            "default": "1"
          },
          {
            "name": "*",
            "type": "Map",
            "description": "Input containing the map",
            "required": false,
            "default": "{}"
          },
          {
            "name": "estimate",
            "type": "Boolean",
            "description": "whether to estimate this item or keep constant to its initial value",
            "required": false,
            "default": "true"
          }
        ],
        "properties": [
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "taxaNames",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "taxonCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "maxStateCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "patternCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "siteCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "stateCounts",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "excludedPatternIndices",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "excludedPatternCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "weights",
            "type": "int[]",
            "access": "read-only"
          },
          {
            "name": "nrTaxa",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "counts",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "types",
            "type": "TreeMap",
            "access": "read-only"
          },
          {
            "name": "dataType",
            "type": "DataType",
            "access": "read-only"
          },
          {
            "name": "state",
            "type": "State",
            "access": "read-only"
          },
          {
            "name": "index",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "estimated",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "current",
            "type": "StateNode",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "FilteredAlignment",
        "fullyQualifiedName": "beast.base.evolution.alignment.FilteredAlignment",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 FilteredAlignment",
        "extends": "beast.base.evolution.alignment.Alignment",
        "implements": [
          "beast.base.core.Loggable",
          "java.lang.Cloneable",
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "filter",
            "type": "String",
            "description": "specifies which of the sites in the input alignment should be selected First site is 1.Filter specs are comma separated, either a singleton, a range [from]-[to] or iteration [from]:[to]:[step]; 1-100 defines a range, 1-100\u0003 or 1:100:3 defines every third in range 1-100, 1::3,2::3 removes every third site. Default for range [1]-[last site], default for iterator [1]:[last site]:[1]",
            "required": true
          },
          {
            "name": "data",
            "type": "Alignment",
            "description": "alignment to be filtered",
            "required": true
          },
          {
            "name": "constantSiteWeights",
            "type": "IntegerParameter",
            "description": "if specified, constant sites will be added with weights specified by the input. The dimension and order of weights must match the datatype. For example for nucleotide data, a 4 dimensional parameter with weights for A, C, G and T respectively need to be specified.",
            "required": false
          },
          {
            "name": "sequence",
            "type": "List<Sequence>",
            "description": "sequence and meta data for particular taxon",
            "required": false,
            "default": "[]"
          },
          {
            "name": "taxa",
            "type": "TaxonSet",
            "description": "An optional taxon-set used only to sort the sequences into the same order as they appear in the taxon-set.",
            "required": false,
            "default": "\tnull\n"
          },
          {
            "name": "statecount",
            "type": "Integer",
            "description": "maximum number of states in all sequences",
            "required": false,
            "constraint": "positive-integer"
          },
          {
            "name": "dataType",
            "type": "String",
            "description": "data type, one of {aminoacid=aminoacid, binary=binary, integer=integer, nucleotide=nucleotide, standard=standard, twoStateCovarion=twoStateCovarion, user defined=user defined}",
            "required": false,
            "default": "nucleotide"
          },
          {
            "name": "userDataType",
            "type": "DataType.Base",
            "description": "non-standard, user specified data type, if specified 'dataType' is ignored",
            "required": false
          },
          {
            "name": "strip",
            "type": "Boolean",
            "description": "sets weight to zero for sites that are invariant (e.g. all 1, all A or all unkown)",
            "required": false,
            "default": "false"
          },
          {
            "name": "weights",
            "type": "String",
            "description": "comma separated list of weights, one for each site in the sequences. If not specified, each site has weight 1",
            "required": false
          },
          {
            "name": "ascertained",
            "type": "Boolean",
            "description": "is true if the alignment allows ascertainment correction, i.e., conditioning the Felsenstein likelihood on excluding constant sites from the alignment",
            "required": false,
            "default": "false"
          },
          {
            "name": "excludefrom",
            "type": "Integer",
            "description": "first site to condition on, default 0",
            "required": false,
            "default": "0"
          },
          {
            "name": "excludeto",
            "type": "Integer",
            "description": "last site to condition on (but excluding this site), default 0",
            "required": false,
            "default": "0"
          },
          {
            "name": "excludeevery",
            "type": "Integer",
            "description": "interval between sites to condition on (default 1)",
            "required": false,
            "default": "1"
          },
          {
            "name": "includefrom",
            "type": "Integer",
            "description": "first site to condition on, default 0",
            "required": false,
            "default": "0"
          },
          {
            "name": "includeto",
            "type": "Integer",
            "description": "last site to condition on, default 0",
            "required": false,
            "default": "0"
          },
          {
            "name": "includeevery",
            "type": "Integer",
            "description": "interval between sites to condition on (default 1)",
            "required": false,
            "default": "1"
          },
          {
            "name": "*",
            "type": "Map",
            "description": "Input containing the map",
            "required": false,
            "default": "{}"
          },
          {
            "name": "estimate",
            "type": "Boolean",
            "description": "whether to estimate this item or keep constant to its initial value",
            "required": false,
            "default": "true"
          }
        ],
        "properties": [
          {
            "name": "counts",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "taxaNames",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "taxonCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "maxStateCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "patternCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "siteCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "stateCounts",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "excludedPatternIndices",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "excludedPatternCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "weights",
            "type": "int[]",
            "access": "read-only"
          },
          {
            "name": "nrTaxa",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "types",
            "type": "TreeMap",
            "access": "read-only"
          },
          {
            "name": "dataType",
            "type": "DataType",
            "access": "read-only"
          },
          {
            "name": "state",
            "type": "State",
            "access": "read-only"
          },
          {
            "name": "index",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "estimated",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "current",
            "type": "StateNode",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "Sequence",
        "fullyQualifiedName": "beast.base.evolution.alignment.Sequence",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 Sequence",
        "extends": "beast.base.core.BEASTObject",
        "implements": [
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "totalcount",
            "type": "Integer",
            "description": "number of states or the number of lineages for this species in SNAPP analysis",
            "required": false,
            "constraint": "positive-integer"
          },
          {
            "name": "taxon",
            "type": "String",
            "description": "name of this species",
            "required": true
          },
          {
            "name": "value",
            "type": "String",
            "description": "sequence data, either encoded as a string or as comma separated list of integers, or comma separated likelihoods\/probabilities for each site if uncertain=true.In either case, whitespace is ignored.",
            "required": true
          },
          {
            "name": "uncertain",
            "type": "Boolean",
            "description": "if true, sequence is provided as comma separated probabilities for each character, with sites separated by a semi-colons. In this formulation, gaps are coded as 1\/K,...,1\/K, where K is the number of states in the model.",
            "required": false
          }
        ],
        "properties": [
          {
            "name": "likelihoods",
            "type": "double[][]",
            "access": "read-only"
          },
          {
            "name": "taxon",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "data",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "Taxon",
        "fullyQualifiedName": "beast.base.evolution.alignment.Taxon",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 Taxon",
        "extends": "beast.base.core.BEASTObject",
        "implements": [
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [],
        "properties": [
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "TaxonSet",
        "fullyQualifiedName": "beast.base.evolution.alignment.TaxonSet",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 TaxonSet",
        "extends": "beast.base.evolution.alignment.Taxon",
        "implements": [
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "alignment",
            "type": "Alignment",
            "description": "alignment where each sequence represents a taxon",
            "required": false
          },
          {
            "name": "taxon",
            "type": "List<Taxon>",
            "description": "list of taxa making up the set",
            "required": false,
            "default": "[]"
          }
        ],
        "properties": [
          {
            "name": "taxaNames",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "taxonCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "taxonSet",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "nrTaxa",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "RandomLocalClockModel",
        "fullyQualifiedName": "beast.base.evolution.branchratemodel.RandomLocalClockModel",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 RandomLocalClockModel",
        "extends": "beast.base.evolution.branchratemodel.BranchRateModel$Base",
        "implements": [
          "beast.base.evolution.branchratemodel.BranchRateModel",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "indicators",
            "type": "BooleanParameter",
            "description": "the indicators associated with nodes in the tree for sampling of individual rate changes among branches.",
            "required": true
          },
          {
            "name": "rates",
            "type": "RealParameter",
            "description": "the rate parameters associated with nodes in the tree for sampling of individual rates among branches.",
            "required": true,
            "constraint": "positive"
          },
          {
            "name": "tree",
            "type": "Tree",
            "description": "the tree this relaxed clock is associated with.",
            "required": true
          },
          {
            "name": "ratesAreMultipliers",
            "type": "Boolean",
            "description": "true if the rates should be treated as multipliers (default false).",
            "required": false,
            "default": "false",
            "constraint": "positive"
          },
          {
            "name": "scaling",
            "type": "Boolean",
            "description": "if false, then ignore meanRate input and leave rates unscaled.",
            "required": false,
            "default": "true"
          },
          {
            "name": "includeRoot",
            "type": "Boolean",
            "description": "if true, then the root can take on an arbitrary rate, otherwise the root branch has rate 1.0.",
            "required": false,
            "default": "false"
          },
          {
            "name": "clock.rate",
            "type": "Function",
            "description": "mean clock rate (defaults to 1.0)",
            "required": false,
            "constraint": "positive"
          }
        ],
        "properties": [
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "StrictClockModel",
        "fullyQualifiedName": "beast.base.evolution.branchratemodel.StrictClockModel",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 StrictClockModel",
        "extends": "beast.base.evolution.branchratemodel.BranchRateModel$Base",
        "implements": [
          "beast.base.evolution.branchratemodel.BranchRateModel",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "clock.rate",
            "type": "Function",
            "description": "mean clock rate (defaults to 1.0)",
            "required": false,
            "constraint": "positive"
          }
        ],
        "properties": [
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "UCRelaxedClockModel",
        "fullyQualifiedName": "beast.base.evolution.branchratemodel.UCRelaxedClockModel",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 UCRelaxedClockModel",
        "extends": "beast.base.evolution.branchratemodel.BranchRateModel$Base",
        "implements": [
          "beast.base.evolution.branchratemodel.BranchRateModel",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "distr",
            "type": "ParametricDistribution",
            "description": "the distribution governing the rates among branches. Must have mean of 1. The clock.rate parameter can be used to change the mean rate.",
            "required": true
          },
          {
            "name": "rateCategories",
            "type": "IntegerParameter",
            "description": "the rate categories associated with nodes in the tree for sampling of individual rates among branches.",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "numberOfDiscreteRates",
            "type": "Integer",
            "description": "the number of discrete rates to approximate the rate distribution by. With category parameterisation, a value <= 0 will cause the number of categories to be set equal to the number of branches in the tree. With quantile parameterisation, a value <= 1 will calculate rates for every quantile, a value > 1 will approximate the distribution piecewise linearly with specified number of rates. (default = -1)",
            "required": false,
            "default": "-1",
            "constraint": "positive"
          },
          {
            "name": "rateQuantiles",
            "type": "RealParameter",
            "description": "the rate quantiles associated with nodes in the tree for sampling of individual rates among branches.",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "rates",
            "type": "RealParameter",
            "description": "the rates associated with nodes in the tree for sampling of individual rates among branches.",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "tree",
            "type": "Tree",
            "description": "the tree this relaxed clock is associated with.",
            "required": true
          },
          {
            "name": "normalize",
            "type": "Boolean",
            "description": "Whether to normalize the average rate (default false).",
            "required": false,
            "default": "false"
          },
          {
            "name": "clock.rate",
            "type": "Function",
            "description": "mean clock rate (defaults to 1.0)",
            "required": false,
            "constraint": "positive"
          }
        ],
        "properties": [
          {
            "name": "distribution",
            "type": "ParametricDistribution",
            "access": "read-only"
          },
          {
            "name": "categories",
            "type": "IntegerParameter",
            "access": "read-only"
          },
          {
            "name": "meanRate",
            "type": "Function",
            "access": "read-only"
          },
          {
            "name": "rates",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "Aminoacid",
        "fullyQualifiedName": "beast.base.evolution.datatype.Aminoacid",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 Aminoacid",
        "extends": "beast.base.evolution.datatype.DataType$Base",
        "implements": [
          "beast.base.evolution.datatype.DataType",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [],
        "properties": [
          {
            "name": "typeDescription",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "stateCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "codeLength",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "codeMap",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "standard",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "Binary",
        "fullyQualifiedName": "beast.base.evolution.datatype.Binary",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 Binary",
        "extends": "beast.base.evolution.datatype.DataType$Base",
        "implements": [
          "beast.base.evolution.datatype.DataType",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [],
        "properties": [
          {
            "name": "typeDescription",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "stateCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "codeLength",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "codeMap",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "standard",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "IntegerData",
        "fullyQualifiedName": "beast.base.evolution.datatype.IntegerData",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 IntegerData",
        "extends": "beast.base.evolution.datatype.DataType$Base",
        "implements": [
          "beast.base.evolution.datatype.DataType",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [],
        "properties": [
          {
            "name": "typeDescription",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "stateCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "codeLength",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "codeMap",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "standard",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "Nucleotide",
        "fullyQualifiedName": "beast.base.evolution.datatype.Nucleotide",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 Nucleotide",
        "extends": "beast.base.evolution.datatype.DataType$Base",
        "implements": [
          "beast.base.evolution.datatype.DataType",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [],
        "properties": [
          {
            "name": "typeDescription",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "stateCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "codeLength",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "codeMap",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "standard",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "StandardData",
        "fullyQualifiedName": "beast.base.evolution.datatype.StandardData",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 StandardData",
        "extends": "beast.base.evolution.datatype.DataType$Base",
        "implements": [
          "beast.base.evolution.datatype.DataType",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "nrOfStates",
            "type": "Integer",
            "description": "specifies the maximum number of character states in data matrix or in the filtered alignment",
            "required": false
          },
          {
            "name": "ambiguities",
            "type": "String",
            "description": "all possible ambiguities presented as space separated sets of ordered elements. Elements are digits 0..9.",
            "required": false
          },
          {
            "name": "charstatelabels",
            "type": "List<UserDataType>",
            "description": "list of morphological character descriptions. Position in the list corresponds to the position of thecharacter in the alignment",
            "required": false,
            "default": "[]"
          }
        ],
        "properties": [
          {
            "name": "typeDescription",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "stateCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "codeLength",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "codeMap",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "standard",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "TwoStateCovarion",
        "fullyQualifiedName": "beast.base.evolution.datatype.TwoStateCovarion",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 TwoStateCovarion",
        "extends": "beast.base.evolution.datatype.DataType$Base",
        "implements": [
          "beast.base.evolution.datatype.DataType",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [],
        "properties": [
          {
            "name": "typeDescription",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "stateCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "codeLength",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "codeMap",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "standard",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "UserDataType",
        "fullyQualifiedName": "beast.base.evolution.datatype.UserDataType",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 UserDataType",
        "extends": "beast.base.evolution.datatype.DataType$Base",
        "implements": [
          "beast.base.evolution.datatype.DataType",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "states",
            "type": "Integer",
            "description": "total number of states",
            "required": true
          },
          {
            "name": "codelength",
            "type": "Integer",
            "description": "length of code, if negative a variable length code is assumed, default 1",
            "required": false,
            "default": "1"
          },
          {
            "name": "codeMap",
            "type": "String",
            "description": "mapping of codes to states. A comma separated string of codes with a subset of states. A state set is a space separates list of zero based integers, up to the number of states, e.g. A=0, C=1, R=0 2, ? = 0 1 2 3",
            "required": true
          },
          {
            "name": "characterName",
            "type": "String",
            "description": "the name of the character",
            "required": false
          },
          {
            "name": "value",
            "type": "String",
            "description": "the list of the state names ordered according to codes given, that is the first in the list is coded by 0, second, by 1 and so forth.",
            "required": false
          }
        ],
        "properties": [
          {
            "name": "typeDescription",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "stateCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "codeLength",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "codeMap",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "standard",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "Distance.Base",
        "fullyQualifiedName": "beast.base.evolution.distance.Distance$Base",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "Inner type of Distance",
        "extends": "beast.base.core.BEASTObject",
        "implements": [
          "beast.base.evolution.distance.Distance",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [],
        "properties": [
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "F84Distance",
        "fullyQualifiedName": "beast.base.evolution.distance.F84Distance",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 F84Distance",
        "extends": "beast.base.evolution.distance.Distance$Base",
        "implements": [
          "beast.base.evolution.distance.Distance",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [],
        "properties": [
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "HammingDistance",
        "fullyQualifiedName": "beast.base.evolution.distance.HammingDistance",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 HammingDistance",
        "extends": "beast.base.evolution.distance.Distance$Base",
        "implements": [
          "beast.base.evolution.distance.Distance",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [],
        "properties": [
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "JukesCantorDistance",
        "fullyQualifiedName": "beast.base.evolution.distance.JukesCantorDistance",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 JukesCantorDistance",
        "extends": "beast.base.evolution.distance.Distance$Base",
        "implements": [
          "beast.base.evolution.distance.Distance",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [],
        "properties": [
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "SMMDistance",
        "fullyQualifiedName": "beast.base.evolution.distance.SMMDistance",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 SMMDistance",
        "extends": "beast.base.evolution.distance.Distance$Base",
        "implements": [
          "beast.base.evolution.distance.Distance",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [],
        "properties": [
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "BeagleTreeLikelihood",
        "fullyQualifiedName": "beast.base.evolution.likelihood.BeagleTreeLikelihood",
        "isDistribution": true,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 BeagleTreeLikelihood",
        "extends": "beast.base.evolution.likelihood.TreeLikelihood",
        "implements": [
          "beast.base.core.Loggable",
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface"
        ],
        "primaryArgument": {
          "name": "data",
          "type": "Alignment",
          "description": "sequence data for the beast.tree",
          "required": true
        },
        "arguments": [
          {
            "name": "useAmbiguities",
            "type": "Boolean",
            "description": "flag to indicate that sites containing ambiguous states should be handled instead of ignored (the default)",
            "required": false,
            "default": "false"
          },
          {
            "name": "useTipLikelihoods",
            "type": "Boolean",
            "description": "flag to indicate that partial likelihoods are provided at the tips",
            "required": false,
            "default": "false"
          },
          {
            "name": "implementation",
            "type": "String",
            "description": "name of class that implements this treelikelihood potentially more efficiently. This class will be tried first, with the TreeLikelihood as fallback implementation. When multi-threading, multiple objects can be created.",
            "required": false,
            "default": "beast.evolution.likelihood.BeagleTreeLikelihood"
          },
          {
            "name": "scaling",
            "type": "TreeLikelihood.Scaling",
            "description": "type of scaling to use, one of [none, always, _default]. If not specified, the -beagle_scaling flag is used.",
            "required": false,
            "default": "_default"
          },
          {
            "name": "rootFrequencies",
            "type": "Frequencies",
            "description": "prior state frequencies at root, optional",
            "required": false
          },
          {
            "name": "tree",
            "type": "TreeInterface",
            "description": "phylogenetic beast.tree with sequence data in the leafs",
            "required": true
          },
          {
            "name": "siteModel",
            "type": "SiteModelInterface",
            "description": "site model for leafs in the beast.tree",
            "required": true
          },
          {
            "name": "branchRateModel",
            "type": "BranchRateModel.Base",
            "description": "A model describing the rates on the branches of the beast.tree.",
            "required": false,
            "constraint": "positive"
          }
        ],
        "properties": [
          {
            "name": "patternCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "patternLogLikelihoods",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "partialBufferHelper",
            "type": "BeagleTreeLikelihood.BufferIndexHelper",
            "access": "read-only"
          },
          {
            "name": "matrixBufferHelper",
            "type": "BeagleTreeLikelihood.BufferIndexHelper",
            "access": "read-only"
          },
          {
            "name": "beagle",
            "type": "Beagle",
            "access": "read-only"
          },
          {
            "name": "conditions",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "proportionInvariant",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "likelihoodCore",
            "type": "LikelihoodCore",
            "access": "read-only"
          },
          {
            "name": "substitutionModel",
            "type": "SubstitutionModel",
            "access": "read-only"
          },
          {
            "name": "constantPattern",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "rootPartials",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "arguments",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "currentLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "stochastic",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "storedLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "nonStochasticLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "GenericTreeLikelihood",
        "fullyQualifiedName": "beast.base.evolution.likelihood.GenericTreeLikelihood",
        "isDistribution": true,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 GenericTreeLikelihood",
        "extends": "beast.base.inference.Distribution",
        "implements": [
          "beast.base.core.Loggable",
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "data",
            "type": "Alignment",
            "description": "sequence data for the beast.tree",
            "required": true
          },
          {
            "name": "tree",
            "type": "TreeInterface",
            "description": "phylogenetic beast.tree with sequence data in the leafs",
            "required": true
          },
          {
            "name": "siteModel",
            "type": "SiteModelInterface",
            "description": "site model for leafs in the beast.tree",
            "required": true
          },
          {
            "name": "branchRateModel",
            "type": "BranchRateModel.Base",
            "description": "A model describing the rates on the branches of the beast.tree.",
            "required": false,
            "constraint": "positive"
          }
        ],
        "properties": [
          {
            "name": "conditions",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "arguments",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "currentLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "stochastic",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "storedLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "nonStochasticLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "ThreadedTreeLikelihood",
        "fullyQualifiedName": "beast.base.evolution.likelihood.ThreadedTreeLikelihood",
        "isDistribution": true,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 ThreadedTreeLikelihood",
        "extends": "beast.base.evolution.likelihood.GenericTreeLikelihood",
        "implements": [
          "beast.base.core.Loggable",
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "useAmbiguities",
            "type": "Boolean",
            "description": "flag to indicate leafs that sites containing ambiguous states should be handled instead of ignored (the default)",
            "required": false,
            "default": "false"
          },
          {
            "name": "threads",
            "type": "Integer",
            "description": "maximum number of threads to use, if less than 1 the number of threads in BeastMCMC is used (default -1)",
            "required": false,
            "default": "-1"
          },
          {
            "name": "proportions",
            "type": "String",
            "description": "specifies proportions of patterns used per thread as space delimited string. This is useful when using a mixture of BEAGLE devices that run at different speeds, e.g GPU and CPU. The string is duplicated if there are more threads than proportions specified. For example, '1 2' as well as '33 66' with 2 threads specifies that the first thread gets a third of the patterns and the second two thirds. With 3 threads, it is interpreted as '1 2 1' = 25%, 50%, 25% and with 7 threads it is '1 2 1 2 1 2 1' = 10% 20% 10% 20% 10% 20% 10%. If not specified, all threads get the same proportion of patterns.",
            "required": false
          },
          {
            "name": "scaling",
            "type": "ThreadedTreeLikelihood.Scaling",
            "description": "type of scaling to use, one of [none, always, _default]. If not specified, the -beagle_scaling flag is used.",
            "required": false,
            "default": "_default"
          },
          {
            "name": "rootFrequencies",
            "type": "Frequencies",
            "description": "prior state frequencies at root, optional",
            "required": false
          },
          {
            "name": "data",
            "type": "Alignment",
            "description": "sequence data for the beast.tree",
            "required": true
          },
          {
            "name": "tree",
            "type": "TreeInterface",
            "description": "phylogenetic beast.tree with sequence data in the leafs",
            "required": true
          },
          {
            "name": "siteModel",
            "type": "SiteModelInterface",
            "description": "site model for leafs in the beast.tree",
            "required": true
          },
          {
            "name": "branchRateModel",
            "type": "BranchRateModel.Base",
            "description": "A model describing the rates on the branches of the beast.tree.",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "*",
            "type": "List<TreeLikelihood>",
            "description": "",
            "required": false,
            "default": "[]"
          }
        ],
        "properties": [
          {
            "name": "conditions",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "patternLogLikelihoods",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "arguments",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "currentLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "stochastic",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "storedLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "nonStochasticLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "TreeLikelihood",
        "fullyQualifiedName": "beast.base.evolution.likelihood.TreeLikelihood",
        "isDistribution": true,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 TreeLikelihood",
        "extends": "beast.base.evolution.likelihood.GenericTreeLikelihood",
        "implements": [
          "beast.base.core.Loggable",
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface"
        ],
        "primaryArgument": {
          "name": "data",
          "type": "Alignment",
          "description": "sequence data for the beast.tree",
          "required": true
        },
        "arguments": [
          {
            "name": "useAmbiguities",
            "type": "Boolean",
            "description": "flag to indicate that sites containing ambiguous states should be handled instead of ignored (the default)",
            "required": false,
            "default": "false"
          },
          {
            "name": "useTipLikelihoods",
            "type": "Boolean",
            "description": "flag to indicate that partial likelihoods are provided at the tips",
            "required": false,
            "default": "false"
          },
          {
            "name": "implementation",
            "type": "String",
            "description": "name of class that implements this treelikelihood potentially more efficiently. This class will be tried first, with the TreeLikelihood as fallback implementation. When multi-threading, multiple objects can be created.",
            "required": false,
            "default": "beast.evolution.likelihood.BeagleTreeLikelihood"
          },
          {
            "name": "scaling",
            "type": "TreeLikelihood.Scaling",
            "description": "type of scaling to use, one of [none, always, _default]. If not specified, the -beagle_scaling flag is used.",
            "required": false,
            "default": "_default"
          },
          {
            "name": "rootFrequencies",
            "type": "Frequencies",
            "description": "prior state frequencies at root, optional",
            "required": false
          },
          {
            "name": "tree",
            "type": "TreeInterface",
            "description": "phylogenetic beast.tree with sequence data in the leafs",
            "required": true
          },
          {
            "name": "siteModel",
            "type": "SiteModelInterface",
            "description": "site model for leafs in the beast.tree",
            "required": true
          },
          {
            "name": "branchRateModel",
            "type": "BranchRateModel.Base",
            "description": "A model describing the rates on the branches of the beast.tree.",
            "required": false,
            "constraint": "positive"
          }
        ],
        "properties": [
          {
            "name": "conditions",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "proportionInvariant",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "patternLogLikelihoods",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "likelihoodCore",
            "type": "LikelihoodCore",
            "access": "read-only"
          },
          {
            "name": "substitutionModel",
            "type": "SubstitutionModel",
            "access": "read-only"
          },
          {
            "name": "constantPattern",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "rootPartials",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "arguments",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "currentLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "stochastic",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "storedLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "nonStochasticLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "RateStatistic",
        "fullyQualifiedName": "beast.base.evolution.RateStatistic",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 RateStatistic",
        "extends": "beast.base.core.BEASTObject",
        "implements": [
          "beast.base.core.Loggable",
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "treeLikelihood",
            "type": "GenericTreeLikelihood",
            "description": "TreeLikelihood containing branch rate model that provides rates for a tree",
            "required": false
          },
          {
            "name": "branchratemodel",
            "type": "BranchRateModel",
            "description": "model that provides rates for a tree",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "tree",
            "type": "Tree",
            "description": "tree for which the rates apply",
            "required": true
          },
          {
            "name": "internal",
            "type": "Boolean",
            "description": "consider internal nodes, default true",
            "required": false,
            "default": "true"
          },
          {
            "name": "external",
            "type": "Boolean",
            "description": "consider external nodes, default true",
            "required": false,
            "default": "true"
          }
        ],
        "properties": [
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "SiteModel",
        "fullyQualifiedName": "beast.base.evolution.sitemodel.SiteModel",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 SiteModel",
        "extends": "beast.base.evolution.sitemodel.SiteModelInterface$Base",
        "implements": [
          "beast.base.core.BEASTInterface",
          "beast.base.evolution.sitemodel.SiteModelInterface"
        ],
        "arguments": [
          {
            "name": "mutationRate",
            "type": "RealParameter",
            "description": "mutation rate (defaults to 1.0)",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "gammaCategoryCount",
            "type": "Integer",
            "description": "gamma category count (default=zero for no gamma)",
            "required": false,
            "default": "0",
            "constraint": "positive-integer"
          },
          {
            "name": "shape",
            "type": "RealParameter",
            "description": "shape parameter of gamma distribution. Ignored if gammaCategoryCount 1 or less",
            "required": false
          },
          {
            "name": "proportionInvariant",
            "type": "RealParameter",
            "description": "proportion of sites that is invariant: should be between 0 (default) and 1",
            "required": false
          },
          {
            "name": "substModel",
            "type": "SubstitutionModel",
            "description": "substitution model along branches in the beast.tree",
            "required": true
          }
        ],
        "properties": [
          {
            "name": "proportionInvariant",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "categoryCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "substitutionModel",
            "type": "SubstitutionModel",
            "access": "read-only"
          },
          {
            "name": "conditions",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "BirthDeathGernhard08Model",
        "fullyQualifiedName": "beast.base.evolution.speciation.BirthDeathGernhard08Model",
        "isDistribution": true,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 BirthDeathGernhard08Model",
        "extends": "beast.base.evolution.speciation.YuleModel",
        "implements": [
          "beast.base.core.Loggable",
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface"
        ],
        "primaryArgument": {
          "name": "tree",
          "type": "TreeInterface",
          "description": "tree over which to calculate a prior or likelihood",
          "required": false
        },
        "arguments": [
          {
            "name": "type",
            "type": "String",
            "description": "tree type, should be one of [unscaled, timesonly, oriented, labeled] (default unscaled)",
            "required": false,
            "default": "unscaled"
          },
          {
            "name": "relativeDeathRate",
            "type": "RealParameter",
            "description": "relative death rate parameter, mu\/lambda in birth death model (turnover parameter)",
            "required": true,
            "constraint": "positive"
          },
          {
            "name": "sampleProbability",
            "type": "RealParameter",
            "description": "sample probability, rho in birth\/death model",
            "required": false,
            "constraint": "probability"
          },
          {
            "name": "birthDiffRate",
            "type": "RealParameter",
            "description": "birth difference rate parameter, lambda - mu in birth\/death model (diversification rate)",
            "required": true,
            "constraint": "positive"
          },
          {
            "name": "originHeight",
            "type": "RealParameter",
            "description": "the height of the point of origin of the process",
            "required": false
          },
          {
            "name": "conditionalOnRoot",
            "type": "Boolean",
            "description": "Whether to condition on the root (default false)",
            "required": false,
            "default": "false"
          },
          {
            "name": "treeIntervals",
            "type": "TreeIntervals",
            "description": "Intervals for a phylogenetic beast tree",
            "required": false
          }
        ],
        "properties": [
          {
            "name": "conditions",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "arguments",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "currentLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "stochastic",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "storedLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "nonStochasticLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "CalibratedBirthDeathModel",
        "fullyQualifiedName": "beast.base.evolution.speciation.CalibratedBirthDeathModel",
        "isDistribution": true,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 CalibratedBirthDeathModel",
        "extends": "beast.base.evolution.speciation.SpeciesTreeDistribution",
        "implements": [
          "beast.base.core.Loggable",
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface"
        ],
        "primaryArgument": {
          "name": "tree",
          "type": "TreeInterface",
          "description": "tree over which to calculate a prior or likelihood",
          "required": false
        },
        "arguments": [
          {
            "name": "birthRate",
            "type": "RealParameter",
            "description": "birth rate - the rate at which new lineages are created as a result of an existing lineage splitting into two.",
            "required": true,
            "constraint": "positive"
          },
          {
            "name": "relativeDeathRate",
            "type": "RealParameter",
            "description": "relative death rate parameter, mu\/lambda in birth death model",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "sampleProbability",
            "type": "RealParameter",
            "description": "sample probability, rho in birth\/death model",
            "required": false,
            "constraint": "probability"
          },
          {
            "name": "calibrations",
            "type": "List<CalibrationPoint>",
            "description": "Set of calibrated nodes",
            "required": false,
            "default": "[]"
          },
          {
            "name": "type",
            "type": "CalibratedBirthDeathModel.Type",
            "description": "Type of correction: none for no correction (same as BEAST1), full for Yule-like over calibrated times, and restricted for Yule-like over calibrated times and ranked topology (default 'full'). However, 'full' is generally slow except for a few special cases, such as a single clade or two nested clades.",
            "required": false,
            "default": "full"
          },
          {
            "name": "logMarginal",
            "type": "RPNcalculator",
            "description": "Use provided formula to compute the (log of) the marginal for special cases.",
            "required": false
          },
          {
            "name": "treeIntervals",
            "type": "TreeIntervals",
            "description": "Intervals for a phylogenetic beast tree",
            "required": false
          }
        ],
        "properties": [
          {
            "name": "conditions",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "arguments",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "currentLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "stochastic",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "storedLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "nonStochasticLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "CalibratedYuleInitialTree",
        "fullyQualifiedName": "beast.base.evolution.speciation.CalibratedYuleInitialTree",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 CalibratedYuleInitialTree",
        "extends": "beast.base.evolution.tree.Tree",
        "implements": [
          "beast.base.core.Loggable",
          "java.lang.Cloneable",
          "beast.base.inference.StateNodeInitialiser",
          "beast.base.core.Function",
          "beast.base.evolution.tree.TreeInterface",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "calibrations",
            "type": "List<CalibrationPoint>",
            "description": "Set of calibrated nodes",
            "required": true,
            "default": "[]"
          },
          {
            "name": "initial",
            "type": "Tree",
            "description": "tree to start with",
            "required": false
          },
          {
            "name": "trait",
            "type": "List<TraitSet>",
            "description": "trait information for initializing traits (like node dates) in the tree",
            "required": false,
            "default": "[]"
          },
          {
            "name": "taxonset",
            "type": "TaxonSet",
            "description": "set of taxa that correspond to the leafs in the tree",
            "required": false
          },
          {
            "name": "nodetype",
            "type": "String",
            "description": "type of the nodes in the beast.tree",
            "required": false,
            "default": "beast.base.evolution.tree.Node"
          },
          {
            "name": "adjustTreeNodeHeights",
            "type": "Boolean",
            "description": "if true (default), then tree node heights are adjusted to avoid non-positive branch lengths. If you want to maintain zero branch lengths then you must set this to false.",
            "required": false,
            "default": "true"
          },
          {
            "name": "estimate",
            "type": "Boolean",
            "description": "whether to estimate this item or keep constant to its initial value",
            "required": false,
            "default": "true"
          }
        ],
        "properties": [
          {
            "name": "root",
            "type": "Node",
            "access": "read-only"
          },
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "internalNodeCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "taxaNames",
            "type": "String[]",
            "access": "read-only"
          },
          {
            "name": "leafNodeCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "nodeCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "dateType",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "nodesAsArray",
            "type": "Node[]",
            "access": "read-only"
          },
          {
            "name": "externalNodes",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "internalNodes",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "taxonset",
            "type": "TaxonSet",
            "access": "read-only"
          },
          {
            "name": "dateTrait",
            "type": "TraitSet",
            "access": "read-only"
          },
          {
            "name": "directAncestorNodeCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "state",
            "type": "State",
            "access": "read-only"
          },
          {
            "name": "index",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "estimated",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "current",
            "type": "StateNode",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "CalibratedYuleModel",
        "fullyQualifiedName": "beast.base.evolution.speciation.CalibratedYuleModel",
        "isDistribution": true,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 CalibratedYuleModel",
        "extends": "beast.base.evolution.speciation.SpeciesTreeDistribution",
        "implements": [
          "beast.base.core.Loggable",
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface"
        ],
        "primaryArgument": {
          "name": "tree",
          "type": "TreeInterface",
          "description": "tree over which to calculate a prior or likelihood",
          "required": false
        },
        "arguments": [
          {
            "name": "birthRate",
            "type": "RealParameter",
            "description": "birth rate of splitting a linage into two",
            "required": true,
            "constraint": "positive"
          },
          {
            "name": "calibrations",
            "type": "List<CalibrationPoint>",
            "description": "Set of calibrated nodes",
            "required": false,
            "default": "[]"
          },
          {
            "name": "type",
            "type": "CalibratedYuleModel.Type",
            "description": "Type of correction: none for no correction (same as BEAST1), full for Yule-like over calibrated times, and restricted for Yule-like over calibrated times and ranked topology (default 'full'). However, 'full' is generally slow except for in a few special cases, such as a single clade or two nested clades.",
            "required": false,
            "default": "full"
          },
          {
            "name": "logMarginal",
            "type": "RPNcalculator",
            "description": "Used provided correction (log of marginal) for special cases.",
            "required": false
          },
          {
            "name": "treeIntervals",
            "type": "TreeIntervals",
            "description": "Intervals for a phylogenetic beast tree",
            "required": false
          }
        ],
        "properties": [
          {
            "name": "conditions",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "arguments",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "currentLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "stochastic",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "storedLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "nonStochasticLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "CalibrationPoint",
        "fullyQualifiedName": "beast.base.evolution.speciation.CalibrationPoint",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 CalibrationPoint",
        "extends": "beast.base.core.BEASTObject",
        "implements": [
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "taxonset",
            "type": "TaxonSet",
            "description": "Set of taxa. The prior distribution is applied to their TMRCA.",
            "required": true
          },
          {
            "name": "distr",
            "type": "ParametricDistribution",
            "description": "Prior distribution applied to time of clade MRCA",
            "required": true
          },
          {
            "name": "parentOf",
            "type": "Boolean",
            "description": "Use time of clade parent. Default is false.",
            "required": false,
            "default": "false"
          }
        ],
        "properties": [
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "GeneTreeForSpeciesTreeDistribution",
        "fullyQualifiedName": "beast.base.evolution.speciation.GeneTreeForSpeciesTreeDistribution",
        "isDistribution": true,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 GeneTreeForSpeciesTreeDistribution",
        "extends": "beast.base.evolution.tree.TreeDistribution",
        "implements": [
          "beast.base.core.Loggable",
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface"
        ],
        "primaryArgument": {
          "name": "tree",
          "type": "TreeInterface",
          "description": "tree over which to calculate a prior or likelihood",
          "required": true
        },
        "arguments": [
          {
            "name": "speciesTree",
            "type": "TreeInterface",
            "description": "species tree containing the associated gene tree",
            "required": true
          },
          {
            "name": "ploidy",
            "type": "Double",
            "description": "ploidy (copy number) for this gene, typically a whole number or half (default 2 for autosomal_nuclear)",
            "required": false,
            "default": "2.0"
          },
          {
            "name": "speciesTreePrior",
            "type": "SpeciesTreePopFunction",
            "description": "defines population function and its parameters",
            "required": true
          },
          {
            "name": "treetop",
            "type": "TreeTopFinder",
            "description": "calculates height of species tree, required only for linear *beast analysis",
            "required": false
          },
          {
            "name": "treeIntervals",
            "type": "TreeIntervals",
            "description": "Intervals for a phylogenetic beast tree",
            "required": false
          }
        ],
        "properties": [
          {
            "name": "conditions",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "arguments",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "currentLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "stochastic",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "storedLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "nonStochasticLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "RandomGeneTree",
        "fullyQualifiedName": "beast.base.evolution.speciation.RandomGeneTree",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 RandomGeneTree",
        "extends": "beast.base.evolution.tree.coalescent.RandomTree",
        "implements": [
          "beast.base.core.Loggable",
          "java.lang.Cloneable",
          "beast.base.inference.StateNodeInitialiser",
          "beast.base.core.Function",
          "beast.base.evolution.tree.TreeInterface",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "speciesTree",
            "type": "Tree",
            "description": "The species tree in which this random gene tree needs to fit",
            "required": true
          },
          {
            "name": "taxa",
            "type": "Alignment",
            "description": "set of taxa to initialise tree specified by alignment",
            "required": false
          },
          {
            "name": "populationModel",
            "type": "PopulationFunction",
            "description": "population function for generating coalescent???",
            "required": true
          },
          {
            "name": "constraint",
            "type": "List<MRCAPrior>",
            "description": "specifies (monophyletic or height distribution) constraints on internal nodes",
            "required": false,
            "default": "[]"
          },
          {
            "name": "rootHeight",
            "type": "Double",
            "description": "If specified the tree will be scaled to match the root height, if constraints allow this",
            "required": false
          },
          {
            "name": "initial",
            "type": "Tree",
            "description": "tree to start with",
            "required": false
          },
          {
            "name": "trait",
            "type": "List<TraitSet>",
            "description": "trait information for initializing traits (like node dates) in the tree",
            "required": false,
            "default": "[]"
          },
          {
            "name": "taxonset",
            "type": "TaxonSet",
            "description": "set of taxa that correspond to the leafs in the tree",
            "required": false
          },
          {
            "name": "nodetype",
            "type": "String",
            "description": "type of the nodes in the beast.tree",
            "required": false,
            "default": "beast.base.evolution.tree.Node"
          },
          {
            "name": "adjustTreeNodeHeights",
            "type": "Boolean",
            "description": "if true (default), then tree node heights are adjusted to avoid non-positive branch lengths. If you want to maintain zero branch lengths then you must set this to false.",
            "required": false,
            "default": "true"
          },
          {
            "name": "estimate",
            "type": "Boolean",
            "description": "whether to estimate this item or keep constant to its initial value",
            "required": false,
            "default": "true"
          }
        ],
        "properties": [
          {
            "name": "taxaNames",
            "type": "String[]",
            "access": "read-only"
          },
          {
            "name": "root",
            "type": "Node",
            "access": "read-only"
          },
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "internalNodeCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "leafNodeCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "nodeCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "dateType",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "nodesAsArray",
            "type": "Node[]",
            "access": "read-only"
          },
          {
            "name": "externalNodes",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "internalNodes",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "taxonset",
            "type": "TaxonSet",
            "access": "read-only"
          },
          {
            "name": "dateTrait",
            "type": "TraitSet",
            "access": "read-only"
          },
          {
            "name": "directAncestorNodeCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "state",
            "type": "State",
            "access": "read-only"
          },
          {
            "name": "index",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "estimated",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "current",
            "type": "StateNode",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "SpeciesTreeLogger",
        "fullyQualifiedName": "beast.base.evolution.speciation.SpeciesTreeLogger",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 SpeciesTreeLogger",
        "extends": "beast.base.core.BEASTObject",
        "implements": [
          "beast.base.core.Loggable",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "tree",
            "type": "Tree",
            "description": "tree to be logged",
            "required": true
          },
          {
            "name": "popSize",
            "type": "Function",
            "description": "population size parameter associated with tree nodes",
            "required": true,
            "constraint": "positive-integer"
          },
          {
            "name": "popSizeTop",
            "type": "Function",
            "description": "population size parameter associated with top of tree branches, only used for non-constant *beast analysis",
            "required": false,
            "constraint": "positive-integer"
          },
          {
            "name": "speciesTreePrior",
            "type": "SpeciesTreePrior",
            "description": "species tree prior, used to find which Population Size Function is used. If not specified, assumes 'constant'",
            "required": false
          },
          {
            "name": "treetop",
            "type": "TreeTopFinder",
            "description": "calculates height of species tree",
            "required": true
          },
          {
            "name": "metadata",
            "type": "List<Function>",
            "description": "meta data to be logged with the tree nodes",
            "required": false,
            "default": "[]"
          }
        ],
        "properties": [
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "SpeciesTreePopFunction",
        "fullyQualifiedName": "beast.base.evolution.speciation.SpeciesTreePopFunction",
        "isDistribution": true,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 SpeciesTreePopFunction",
        "extends": "beast.base.evolution.tree.TreeDistribution",
        "implements": [
          "beast.base.core.Loggable",
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface"
        ],
        "primaryArgument": {
          "name": "tree",
          "type": "TreeInterface",
          "description": "tree over which to calculate a prior or likelihood",
          "required": false
        },
        "arguments": [
          {
            "name": "popFunction",
            "type": "SpeciesTreePopFunction.TreePopSizeFunction",
            "description": "Population function. This can be [constant, linear, linear_with_constant_root] (default 'constant')",
            "required": false,
            "default": "constant"
          },
          {
            "name": "bottomPopSize",
            "type": "RealParameter",
            "description": "population size parameter for populations at the bottom of a branch. For constant population function, this is the same at the top of the branch.",
            "required": true,
            "constraint": "positive-integer"
          },
          {
            "name": "topPopSize",
            "type": "RealParameter",
            "description": "population size parameter at the top of a branch. Ignored for constant population function, but required for linear population function.",
            "required": false,
            "constraint": "positive-integer"
          },
          {
            "name": "taxonset",
            "type": "TaxonSet",
            "description": "set of taxa mapping lineages to species",
            "required": true
          },
          {
            "name": "treeIntervals",
            "type": "TreeIntervals",
            "description": "Intervals for a phylogenetic beast tree",
            "required": false
          }
        ],
        "properties": [
          {
            "name": "conditions",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "arguments",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "currentLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "stochastic",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "storedLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "nonStochasticLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "SpeciesTreePrior",
        "fullyQualifiedName": "beast.base.evolution.speciation.SpeciesTreePrior",
        "isDistribution": true,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 SpeciesTreePrior",
        "extends": "beast.base.evolution.speciation.SpeciesTreePopFunction",
        "implements": [
          "beast.base.core.Loggable",
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface"
        ],
        "primaryArgument": {
          "name": "tree",
          "type": "TreeInterface",
          "description": "tree over which to calculate a prior or likelihood",
          "required": false
        },
        "arguments": [
          {
            "name": "gammaParameter",
            "type": "RealParameter",
            "description": "scale parameter of the gamma distribution over population sizes. This makes this parameter half the expected population size on all branches for constant population function, but a quarter of the expected population size for tip branches only for linear population functions.",
            "required": true
          },
          {
            "name": "popFunction",
            "type": "SpeciesTreePopFunction.TreePopSizeFunction",
            "description": "Population function. This can be [constant, linear, linear_with_constant_root] (default 'constant')",
            "required": false,
            "default": "constant"
          },
          {
            "name": "bottomPopSize",
            "type": "RealParameter",
            "description": "population size parameter for populations at the bottom of a branch. For constant population function, this is the same at the top of the branch.",
            "required": true,
            "constraint": "positive-integer"
          },
          {
            "name": "topPopSize",
            "type": "RealParameter",
            "description": "population size parameter at the top of a branch. Ignored for constant population function, but required for linear population function.",
            "required": false,
            "constraint": "positive-integer"
          },
          {
            "name": "taxonset",
            "type": "TaxonSet",
            "description": "set of taxa mapping lineages to species",
            "required": true
          },
          {
            "name": "treeIntervals",
            "type": "TreeIntervals",
            "description": "Intervals for a phylogenetic beast tree",
            "required": false
          }
        ],
        "properties": [
          {
            "name": "conditions",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "arguments",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "currentLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "stochastic",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "storedLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "nonStochasticLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "StarBeastStartState",
        "fullyQualifiedName": "beast.base.evolution.speciation.StarBeastStartState",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 StarBeastStartState",
        "extends": "beast.base.evolution.tree.Tree",
        "implements": [
          "beast.base.core.Loggable",
          "java.lang.Cloneable",
          "beast.base.inference.StateNodeInitialiser",
          "beast.base.core.Function",
          "beast.base.evolution.tree.TreeInterface",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "method",
            "type": "StarBeastStartState.Method",
            "description": "Initialise either with a totally random state or a point estimate based on alignments data (default point-estimate)",
            "required": false,
            "default": "point-estimate"
          },
          {
            "name": "speciesTree",
            "type": "Tree",
            "description": "The species tree to initialize",
            "required": false
          },
          {
            "name": "gene",
            "type": "List<Tree>",
            "description": "Gene trees to initialize",
            "required": false,
            "default": "[]"
          },
          {
            "name": "calibratedYule",
            "type": "CalibratedYuleModel",
            "description": "The species tree (with calibrations) to initialize",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "popMean",
            "type": "RealParameter",
            "description": "Population mean hyper prior to initialse",
            "required": false
          },
          {
            "name": "birthRate",
            "type": "RealParameter",
            "description": "Tree prior birth rate to initialize",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "speciesTreePrior",
            "type": "SpeciesTreePrior",
            "description": "Population size parameters to initialise",
            "required": false
          },
          {
            "name": "baseRate",
            "type": "Function",
            "description": "Main clock rate used to scale trees (default 1).",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "initial",
            "type": "Tree",
            "description": "tree to start with",
            "required": false
          },
          {
            "name": "trait",
            "type": "List<TraitSet>",
            "description": "trait information for initializing traits (like node dates) in the tree",
            "required": false,
            "default": "[]"
          },
          {
            "name": "taxonset",
            "type": "TaxonSet",
            "description": "set of taxa that correspond to the leafs in the tree",
            "required": false
          },
          {
            "name": "nodetype",
            "type": "String",
            "description": "type of the nodes in the beast.tree",
            "required": false,
            "default": "beast.base.evolution.tree.Node"
          },
          {
            "name": "adjustTreeNodeHeights",
            "type": "Boolean",
            "description": "if true (default), then tree node heights are adjusted to avoid non-positive branch lengths. If you want to maintain zero branch lengths then you must set this to false.",
            "required": false,
            "default": "true"
          },
          {
            "name": "estimate",
            "type": "Boolean",
            "description": "whether to estimate this item or keep constant to its initial value",
            "required": false,
            "default": "true"
          }
        ],
        "properties": [
          {
            "name": "root",
            "type": "Node",
            "access": "read-only"
          },
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "internalNodeCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "taxaNames",
            "type": "String[]",
            "access": "read-only"
          },
          {
            "name": "leafNodeCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "nodeCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "dateType",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "nodesAsArray",
            "type": "Node[]",
            "access": "read-only"
          },
          {
            "name": "externalNodes",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "internalNodes",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "taxonset",
            "type": "TaxonSet",
            "access": "read-only"
          },
          {
            "name": "dateTrait",
            "type": "TraitSet",
            "access": "read-only"
          },
          {
            "name": "directAncestorNodeCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "state",
            "type": "State",
            "access": "read-only"
          },
          {
            "name": "index",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "estimated",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "current",
            "type": "StateNode",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "TreeTopFinder",
        "fullyQualifiedName": "beast.base.evolution.speciation.TreeTopFinder",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 TreeTopFinder",
        "extends": "beast.base.inference.CalculationNode",
        "implements": [
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "tree",
            "type": "List<Tree>",
            "description": "set of trees to search among",
            "required": false,
            "default": "[]"
          }
        ],
        "properties": [
          {
            "name": "highestTreeHeight",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "YuleModel",
        "fullyQualifiedName": "beast.base.evolution.speciation.YuleModel",
        "isDistribution": true,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 YuleModel",
        "extends": "beast.base.evolution.speciation.SpeciesTreeDistribution",
        "implements": [
          "beast.base.core.Loggable",
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface"
        ],
        "primaryArgument": {
          "name": "tree",
          "type": "TreeInterface",
          "description": "tree over which to calculate a prior or likelihood",
          "required": false
        },
        "arguments": [
          {
            "name": "birthDiffRate",
            "type": "RealParameter",
            "description": "birth difference rate parameter, lambda - mu in birth\/death model (diversification rate)",
            "required": true,
            "constraint": "positive"
          },
          {
            "name": "originHeight",
            "type": "RealParameter",
            "description": "the height of the point of origin of the process",
            "required": false
          },
          {
            "name": "conditionalOnRoot",
            "type": "Boolean",
            "description": "Whether to condition on the root (default false)",
            "required": false,
            "default": "false"
          },
          {
            "name": "treeIntervals",
            "type": "TreeIntervals",
            "description": "Intervals for a phylogenetic beast tree",
            "required": false
          }
        ],
        "properties": [
          {
            "name": "conditions",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "arguments",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "currentLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "stochastic",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "storedLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "nonStochasticLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "BinaryCovarion",
        "fullyQualifiedName": "beast.base.evolution.substitutionmodel.BinaryCovarion",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 BinaryCovarion",
        "extends": "beast.base.evolution.substitutionmodel.GeneralSubstitutionModel",
        "implements": [
          "beast.base.evolution.substitutionmodel.SubstitutionModel",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "alpha",
            "type": "RealParameter",
            "description": "the rate of evolution in slow mode",
            "required": true
          },
          {
            "name": "switchRate",
            "type": "RealParameter",
            "description": "the rate of flipping between slow and fast modes",
            "required": true,
            "constraint": "positive"
          },
          {
            "name": "vfrequencies",
            "type": "RealParameter",
            "description": "the frequencies of the visible states",
            "required": true
          },
          {
            "name": "hfrequencies",
            "type": "RealParameter",
            "description": "the frequencies of the hidden rates",
            "required": false
          },
          {
            "name": "mode",
            "type": "BinaryCovarion.MODE",
            "description": "one of BEAST, REVERSIBLE, TUFFLESTEEL BEAST = implementation as in BEAST 1 REVERSIBLE = like BEAST 1 implementation, but using frequencies to make it reversible TUFFLEYSTEEL = Tuffley & Steel (1996) impementation (no rates for ",
            "required": false,
            "default": "BEAST"
          },
          {
            "name": "rates",
            "type": "Function",
            "description": "Rate parameter which defines the transition rate matrix. Only the off-diagonal entries need to be specified (diagonal makes row sum to zero in a rate matrix). Entry i specifies the rate from floor(i\/(n-1)) to i%(n-1)+delta where n is the number of states and delta=1 if floor(i\/(n-1)) <= i%(n-1) and 0 otherwise.",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "eigenSystem",
            "type": "String",
            "description": "Name of the class used for creating an EigenSystem",
            "required": false,
            "default": "beast.base.evolution.substitutionmodel.DefaultEigenSystem"
          },
          {
            "name": "frequencies",
            "type": "Frequencies",
            "description": "substitution model equilibrium state frequencies",
            "required": false
          }
        ],
        "properties": [
          {
            "name": "frequencies",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "rateMatrix",
            "type": "double[][]",
            "access": "read-only"
          },
          {
            "name": "relativeRates",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "stateCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "Blosum62",
        "fullyQualifiedName": "beast.base.evolution.substitutionmodel.Blosum62",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 Blosum62",
        "extends": "beast.base.evolution.substitutionmodel.EmpiricalSubstitutionModel",
        "implements": [
          "beast.base.evolution.substitutionmodel.SubstitutionModel",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "rates",
            "type": "Function",
            "description": "Rate parameter which defines the transition rate matrix. Only the off-diagonal entries need to be specified (diagonal makes row sum to zero in a rate matrix). Entry i specifies the rate from floor(i\/(n-1)) to i%(n-1)+delta where n is the number of states and delta=1 if floor(i\/(n-1)) <= i%(n-1) and 0 otherwise.",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "eigenSystem",
            "type": "String",
            "description": "Name of the class used for creating an EigenSystem",
            "required": false,
            "default": "beast.base.evolution.substitutionmodel.DefaultEigenSystem"
          },
          {
            "name": "frequencies",
            "type": "Frequencies",
            "description": "substitution model equilibrium state frequencies",
            "required": false
          }
        ],
        "properties": [
          {
            "name": "empiricalRates",
            "type": "double[][]",
            "access": "read-only"
          },
          {
            "name": "empiricalFrequencies",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "encodingOrder",
            "type": "int[]",
            "access": "read-only"
          },
          {
            "name": "empericalRateValues",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "rateMatrix",
            "type": "double[][]",
            "access": "read-only"
          },
          {
            "name": "relativeRates",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "stateCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "frequencies",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "ComplexSubstitutionModel",
        "fullyQualifiedName": "beast.base.evolution.substitutionmodel.ComplexSubstitutionModel",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 ComplexSubstitutionModel",
        "extends": "beast.base.evolution.substitutionmodel.GeneralSubstitutionModel",
        "implements": [
          "beast.base.evolution.substitutionmodel.SubstitutionModel",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "rates",
            "type": "Function",
            "description": "Rate parameter which defines the transition rate matrix. Only the off-diagonal entries need to be specified (diagonal makes row sum to zero in a rate matrix). Entry i specifies the rate from floor(i\/(n-1)) to i%(n-1)+delta where n is the number of states and delta=1 if floor(i\/(n-1)) <= i%(n-1) and 0 otherwise.",
            "required": true,
            "constraint": "positive"
          },
          {
            "name": "eigenSystem",
            "type": "String",
            "description": "Name of the class used for creating an EigenSystem",
            "required": false,
            "default": "beast.base.evolution.substitutionmodel.DefaultEigenSystem"
          },
          {
            "name": "frequencies",
            "type": "Frequencies",
            "description": "substitution model equilibrium state frequencies",
            "required": true
          }
        ],
        "properties": [
          {
            "name": "rateMatrix",
            "type": "double[][]",
            "access": "read-only"
          },
          {
            "name": "relativeRates",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "stateCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "frequencies",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "CPREV",
        "fullyQualifiedName": "beast.base.evolution.substitutionmodel.CPREV",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 CPREV",
        "extends": "beast.base.evolution.substitutionmodel.EmpiricalSubstitutionModel",
        "implements": [
          "beast.base.evolution.substitutionmodel.SubstitutionModel",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "rates",
            "type": "Function",
            "description": "Rate parameter which defines the transition rate matrix. Only the off-diagonal entries need to be specified (diagonal makes row sum to zero in a rate matrix). Entry i specifies the rate from floor(i\/(n-1)) to i%(n-1)+delta where n is the number of states and delta=1 if floor(i\/(n-1)) <= i%(n-1) and 0 otherwise.",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "eigenSystem",
            "type": "String",
            "description": "Name of the class used for creating an EigenSystem",
            "required": false,
            "default": "beast.base.evolution.substitutionmodel.DefaultEigenSystem"
          },
          {
            "name": "frequencies",
            "type": "Frequencies",
            "description": "substitution model equilibrium state frequencies",
            "required": false
          }
        ],
        "properties": [
          {
            "name": "empiricalRates",
            "type": "double[][]",
            "access": "read-only"
          },
          {
            "name": "empiricalFrequencies",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "encodingOrder",
            "type": "int[]",
            "access": "read-only"
          },
          {
            "name": "empericalRateValues",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "rateMatrix",
            "type": "double[][]",
            "access": "read-only"
          },
          {
            "name": "relativeRates",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "stateCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "frequencies",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "Dayhoff",
        "fullyQualifiedName": "beast.base.evolution.substitutionmodel.Dayhoff",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 Dayhoff",
        "extends": "beast.base.evolution.substitutionmodel.EmpiricalSubstitutionModel",
        "implements": [
          "beast.base.evolution.substitutionmodel.SubstitutionModel",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "rates",
            "type": "Function",
            "description": "Rate parameter which defines the transition rate matrix. Only the off-diagonal entries need to be specified (diagonal makes row sum to zero in a rate matrix). Entry i specifies the rate from floor(i\/(n-1)) to i%(n-1)+delta where n is the number of states and delta=1 if floor(i\/(n-1)) <= i%(n-1) and 0 otherwise.",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "eigenSystem",
            "type": "String",
            "description": "Name of the class used for creating an EigenSystem",
            "required": false,
            "default": "beast.base.evolution.substitutionmodel.DefaultEigenSystem"
          },
          {
            "name": "frequencies",
            "type": "Frequencies",
            "description": "substitution model equilibrium state frequencies",
            "required": false
          }
        ],
        "properties": [
          {
            "name": "empiricalRates",
            "type": "double[][]",
            "access": "read-only"
          },
          {
            "name": "empiricalFrequencies",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "encodingOrder",
            "type": "int[]",
            "access": "read-only"
          },
          {
            "name": "empericalRateValues",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "rateMatrix",
            "type": "double[][]",
            "access": "read-only"
          },
          {
            "name": "relativeRates",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "stateCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "frequencies",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "Frequencies",
        "fullyQualifiedName": "beast.base.evolution.substitutionmodel.Frequencies",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 Frequencies",
        "extends": "beast.base.inference.CalculationNode",
        "implements": [
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "data",
            "type": "Alignment",
            "description": "Sequence data for which frequencies are calculated",
            "required": false
          },
          {
            "name": "estimate",
            "type": "Boolean",
            "description": "Whether to estimate the frequencies from data (true=default) or assume a uniform distribution over characters (false)",
            "required": false,
            "default": "true"
          },
          {
            "name": "frequencies",
            "type": "RealParameter",
            "description": "A set of frequencies specified as space separated values summing to 1",
            "required": false,
            "dimension": {
              "type": "contextual",
              "resolution": [
                {
                  "context": "parent",
                  "path": "stateCount",
                  "when": "parent implements SubstitutionModel"
                },
                {
                  "context": "sibling",
                  "path": "siteModel.substModel.stateCount",
                  "when": "parent is TreeLikelihood"
                },
                {
                  "context": "alignment",
                  "path": "dataType.stateCount",
                  "when": "alignment is available"
                }
              ]
            },
            "constraint": "simplex"
          }
        ],
        "properties": [
          {
            "name": "freqs",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "GeneralSubstitutionModel",
        "fullyQualifiedName": "beast.base.evolution.substitutionmodel.GeneralSubstitutionModel",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 GeneralSubstitutionModel",
        "extends": "beast.base.evolution.substitutionmodel.SubstitutionModel$Base",
        "implements": [
          "beast.base.evolution.substitutionmodel.SubstitutionModel",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "rates",
            "type": "Function",
            "description": "Rate parameter which defines the transition rate matrix. Only the off-diagonal entries need to be specified (diagonal makes row sum to zero in a rate matrix). Entry i specifies the rate from floor(i\/(n-1)) to i%(n-1)+delta where n is the number of states and delta=1 if floor(i\/(n-1)) <= i%(n-1) and 0 otherwise.",
            "required": true,
            "constraint": "positive"
          },
          {
            "name": "eigenSystem",
            "type": "String",
            "description": "Name of the class used for creating an EigenSystem",
            "required": false,
            "default": "beast.base.evolution.substitutionmodel.DefaultEigenSystem"
          },
          {
            "name": "frequencies",
            "type": "Frequencies",
            "description": "substitution model equilibrium state frequencies",
            "required": true
          }
        ],
        "properties": [
          {
            "name": "rateMatrix",
            "type": "double[][]",
            "access": "read-only"
          },
          {
            "name": "relativeRates",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "stateCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "frequencies",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "GTR",
        "fullyQualifiedName": "beast.base.evolution.substitutionmodel.GTR",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 GTR",
        "extends": "beast.base.evolution.substitutionmodel.GeneralSubstitutionModel",
        "implements": [
          "beast.base.evolution.substitutionmodel.SubstitutionModel",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "rateAC",
            "type": "Function",
            "description": "substitution rate for A to C (default 1)",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "rateAG",
            "type": "Function",
            "description": "substitution rate for A to G (default 1)",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "rateAT",
            "type": "Function",
            "description": "substitution rate for A to T (default 1)",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "rateCG",
            "type": "Function",
            "description": "substitution rate for C to G (default 1)",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "rateCT",
            "type": "Function",
            "description": "substitution rate for C to T (default 1)",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "rateGT",
            "type": "Function",
            "description": "substitution rate for G to T (default 1)",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "rates",
            "type": "Function",
            "description": "Rate parameter which defines the transition rate matrix. Only the off-diagonal entries need to be specified (diagonal makes row sum to zero in a rate matrix). Entry i specifies the rate from floor(i\/(n-1)) to i%(n-1)+delta where n is the number of states and delta=1 if floor(i\/(n-1)) <= i%(n-1) and 0 otherwise.",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "eigenSystem",
            "type": "String",
            "description": "Name of the class used for creating an EigenSystem",
            "required": false,
            "default": "beast.base.evolution.substitutionmodel.DefaultEigenSystem"
          },
          {
            "name": "frequencies",
            "type": "Frequencies",
            "description": "substitution model equilibrium state frequencies",
            "required": true
          }
        ],
        "properties": [
          {
            "name": "rateMatrix",
            "type": "double[][]",
            "access": "read-only"
          },
          {
            "name": "relativeRates",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "stateCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "frequencies",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "HKY",
        "fullyQualifiedName": "beast.base.evolution.substitutionmodel.HKY",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 HKY",
        "extends": "beast.base.evolution.substitutionmodel.SubstitutionModel$NucleotideBase",
        "implements": [
          "beast.base.evolution.substitutionmodel.SubstitutionModel",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "kappa",
            "type": "Function",
            "description": "kappa parameter in HKY model",
            "required": true
          },
          {
            "name": "frequencies",
            "type": "Frequencies",
            "description": "substitution model equilibrium state frequencies",
            "required": true
          }
        ],
        "properties": [
          {
            "name": "stateCount",
            "type": "int",
            "access": "read-only",
            "value": 4
          },
          {
            "name": "frequencies",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "JTT",
        "fullyQualifiedName": "beast.base.evolution.substitutionmodel.JTT",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 JTT",
        "extends": "beast.base.evolution.substitutionmodel.EmpiricalSubstitutionModel",
        "implements": [
          "beast.base.evolution.substitutionmodel.SubstitutionModel",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "rates",
            "type": "Function",
            "description": "Rate parameter which defines the transition rate matrix. Only the off-diagonal entries need to be specified (diagonal makes row sum to zero in a rate matrix). Entry i specifies the rate from floor(i\/(n-1)) to i%(n-1)+delta where n is the number of states and delta=1 if floor(i\/(n-1)) <= i%(n-1) and 0 otherwise.",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "eigenSystem",
            "type": "String",
            "description": "Name of the class used for creating an EigenSystem",
            "required": false,
            "default": "beast.base.evolution.substitutionmodel.DefaultEigenSystem"
          },
          {
            "name": "frequencies",
            "type": "Frequencies",
            "description": "substitution model equilibrium state frequencies",
            "required": false
          }
        ],
        "properties": [
          {
            "name": "empiricalRates",
            "type": "double[][]",
            "access": "read-only"
          },
          {
            "name": "empiricalFrequencies",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "encodingOrder",
            "type": "int[]",
            "access": "read-only"
          },
          {
            "name": "empericalRateValues",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "rateMatrix",
            "type": "double[][]",
            "access": "read-only"
          },
          {
            "name": "relativeRates",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "stateCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "frequencies",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "JukesCantor",
        "fullyQualifiedName": "beast.base.evolution.substitutionmodel.JukesCantor",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 JukesCantor",
        "extends": "beast.base.evolution.substitutionmodel.SubstitutionModel$Base",
        "implements": [
          "beast.base.evolution.substitutionmodel.SubstitutionModel",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "frequencies",
            "type": "Frequencies",
            "description": "substitution model equilibrium state frequencies",
            "required": false
          }
        ],
        "properties": [
          {
            "name": "frequencies",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "stateCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "MTREV",
        "fullyQualifiedName": "beast.base.evolution.substitutionmodel.MTREV",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 MTREV",
        "extends": "beast.base.evolution.substitutionmodel.EmpiricalSubstitutionModel",
        "implements": [
          "beast.base.evolution.substitutionmodel.SubstitutionModel",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "rates",
            "type": "Function",
            "description": "Rate parameter which defines the transition rate matrix. Only the off-diagonal entries need to be specified (diagonal makes row sum to zero in a rate matrix). Entry i specifies the rate from floor(i\/(n-1)) to i%(n-1)+delta where n is the number of states and delta=1 if floor(i\/(n-1)) <= i%(n-1) and 0 otherwise.",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "eigenSystem",
            "type": "String",
            "description": "Name of the class used for creating an EigenSystem",
            "required": false,
            "default": "beast.base.evolution.substitutionmodel.DefaultEigenSystem"
          },
          {
            "name": "frequencies",
            "type": "Frequencies",
            "description": "substitution model equilibrium state frequencies",
            "required": false
          }
        ],
        "properties": [
          {
            "name": "empiricalRates",
            "type": "double[][]",
            "access": "read-only"
          },
          {
            "name": "empiricalFrequencies",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "encodingOrder",
            "type": "int[]",
            "access": "read-only"
          },
          {
            "name": "empericalRateValues",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "rateMatrix",
            "type": "double[][]",
            "access": "read-only"
          },
          {
            "name": "relativeRates",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "stateCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "frequencies",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "MutationDeathModel",
        "fullyQualifiedName": "beast.base.evolution.substitutionmodel.MutationDeathModel",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 MutationDeathModel",
        "extends": "beast.base.evolution.substitutionmodel.SubstitutionModel$Base",
        "implements": [
          "beast.base.evolution.substitutionmodel.SubstitutionModel",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "deathprob",
            "type": "RealParameter",
            "description": "rate of death, used to calculate death probability",
            "required": true,
            "constraint": "probability"
          },
          {
            "name": "substmodel",
            "type": "SubstitutionModel.Base",
            "description": "CTMC Model for the life states, so should have a state-space one less than this model. If not specified, ...",
            "required": false
          },
          {
            "name": "frequencies",
            "type": "Frequencies",
            "description": "substitution model equilibrium state frequencies",
            "required": true
          }
        ],
        "properties": [
          {
            "name": "stateCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "frequencies",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "SYM",
        "fullyQualifiedName": "beast.base.evolution.substitutionmodel.SYM",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 SYM",
        "extends": "beast.base.evolution.substitutionmodel.GeneralSubstitutionModel",
        "implements": [
          "beast.base.evolution.substitutionmodel.SubstitutionModel",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "rateAC",
            "type": "RealParameter",
            "description": "substitution rate for A to C (default 1)",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "rateAG",
            "type": "RealParameter",
            "description": "substitution rate for A to G (default 1)",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "rateAT",
            "type": "RealParameter",
            "description": "substitution rate for A to T (default 1)",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "rateCG",
            "type": "RealParameter",
            "description": "substitution rate for C to G (default 1)",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "rateCT",
            "type": "RealParameter",
            "description": "substitution rate for C to T (default 1)",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "rateGT",
            "type": "RealParameter",
            "description": "substitution rate for G to T (default 1)",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "rates",
            "type": "Function",
            "description": "Rate parameter which defines the transition rate matrix. Only the off-diagonal entries need to be specified (diagonal makes row sum to zero in a rate matrix). Entry i specifies the rate from floor(i\/(n-1)) to i%(n-1)+delta where n is the number of states and delta=1 if floor(i\/(n-1)) <= i%(n-1) and 0 otherwise.",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "eigenSystem",
            "type": "String",
            "description": "Name of the class used for creating an EigenSystem",
            "required": false,
            "default": "beast.base.evolution.substitutionmodel.DefaultEigenSystem"
          },
          {
            "name": "frequencies",
            "type": "Frequencies",
            "description": "substitution model equilibrium state frequencies",
            "required": true
          }
        ],
        "properties": [
          {
            "name": "rateMatrix",
            "type": "double[][]",
            "access": "read-only"
          },
          {
            "name": "relativeRates",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "stateCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "frequencies",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "TIM",
        "fullyQualifiedName": "beast.base.evolution.substitutionmodel.TIM",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 TIM",
        "extends": "beast.base.evolution.substitutionmodel.GeneralSubstitutionModel",
        "implements": [
          "beast.base.evolution.substitutionmodel.SubstitutionModel",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "rateAG",
            "type": "RealParameter",
            "description": "substitution rate for A to G (default 1)",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "rateCT",
            "type": "RealParameter",
            "description": "substitution rate for C to T (default 1)",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "rateTransversions1",
            "type": "RealParameter",
            "description": "substitution rate for A<->C and G<->T",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "rateTransversions2",
            "type": "RealParameter",
            "description": "substitution rate for C<->G and A<->T",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "rates",
            "type": "Function",
            "description": "Rate parameter which defines the transition rate matrix. Only the off-diagonal entries need to be specified (diagonal makes row sum to zero in a rate matrix). Entry i specifies the rate from floor(i\/(n-1)) to i%(n-1)+delta where n is the number of states and delta=1 if floor(i\/(n-1)) <= i%(n-1) and 0 otherwise.",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "eigenSystem",
            "type": "String",
            "description": "Name of the class used for creating an EigenSystem",
            "required": false,
            "default": "beast.base.evolution.substitutionmodel.DefaultEigenSystem"
          },
          {
            "name": "frequencies",
            "type": "Frequencies",
            "description": "substitution model equilibrium state frequencies",
            "required": true
          }
        ],
        "properties": [
          {
            "name": "rateMatrix",
            "type": "double[][]",
            "access": "read-only"
          },
          {
            "name": "relativeRates",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "stateCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "frequencies",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "TN93",
        "fullyQualifiedName": "beast.base.evolution.substitutionmodel.TN93",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 TN93",
        "extends": "beast.base.evolution.substitutionmodel.SubstitutionModel$NucleotideBase",
        "implements": [
          "beast.base.evolution.substitutionmodel.SubstitutionModel",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "kappa1",
            "type": "RealParameter",
            "description": "rate of A<->G transitions",
            "required": true
          },
          {
            "name": "kappa2",
            "type": "RealParameter",
            "description": "rate of C<->T transitions",
            "required": true
          },
          {
            "name": "frequencies",
            "type": "Frequencies",
            "description": "substitution model equilibrium state frequencies",
            "required": true
          }
        ],
        "properties": [
          {
            "name": "kappa1",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "kappa2",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "stateCount",
            "type": "int",
            "access": "read-only",
            "value": 4
          },
          {
            "name": "frequencies",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "TVM",
        "fullyQualifiedName": "beast.base.evolution.substitutionmodel.TVM",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 TVM",
        "extends": "beast.base.evolution.substitutionmodel.GeneralSubstitutionModel",
        "implements": [
          "beast.base.evolution.substitutionmodel.SubstitutionModel",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "rateAC",
            "type": "RealParameter",
            "description": "substitution rate for A to C (default 1)",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "rateAT",
            "type": "RealParameter",
            "description": "substitution rate for A to T (default 1)",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "rateCG",
            "type": "RealParameter",
            "description": "substitution rate for C to G (default 1)",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "rateGT",
            "type": "RealParameter",
            "description": "substitution rate for G to T (default 1)",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "rateTransitions",
            "type": "RealParameter",
            "description": "substitution rate for A<->G and C<->T",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "rates",
            "type": "Function",
            "description": "Rate parameter which defines the transition rate matrix. Only the off-diagonal entries need to be specified (diagonal makes row sum to zero in a rate matrix). Entry i specifies the rate from floor(i\/(n-1)) to i%(n-1)+delta where n is the number of states and delta=1 if floor(i\/(n-1)) <= i%(n-1) and 0 otherwise.",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "eigenSystem",
            "type": "String",
            "description": "Name of the class used for creating an EigenSystem",
            "required": false,
            "default": "beast.base.evolution.substitutionmodel.DefaultEigenSystem"
          },
          {
            "name": "frequencies",
            "type": "Frequencies",
            "description": "substitution model equilibrium state frequencies",
            "required": true
          }
        ],
        "properties": [
          {
            "name": "rateMatrix",
            "type": "double[][]",
            "access": "read-only"
          },
          {
            "name": "relativeRates",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "stateCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "frequencies",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "WAG",
        "fullyQualifiedName": "beast.base.evolution.substitutionmodel.WAG",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 WAG",
        "extends": "beast.base.evolution.substitutionmodel.EmpiricalSubstitutionModel",
        "implements": [
          "beast.base.evolution.substitutionmodel.SubstitutionModel",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "rates",
            "type": "Function",
            "description": "Rate parameter which defines the transition rate matrix. Only the off-diagonal entries need to be specified (diagonal makes row sum to zero in a rate matrix). Entry i specifies the rate from floor(i\/(n-1)) to i%(n-1)+delta where n is the number of states and delta=1 if floor(i\/(n-1)) <= i%(n-1) and 0 otherwise.",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "eigenSystem",
            "type": "String",
            "description": "Name of the class used for creating an EigenSystem",
            "required": false,
            "default": "beast.base.evolution.substitutionmodel.DefaultEigenSystem"
          },
          {
            "name": "frequencies",
            "type": "Frequencies",
            "description": "substitution model equilibrium state frequencies",
            "required": false
          }
        ],
        "properties": [
          {
            "name": "empiricalRates",
            "type": "double[][]",
            "access": "read-only"
          },
          {
            "name": "empiricalFrequencies",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "encodingOrder",
            "type": "int[]",
            "access": "read-only"
          },
          {
            "name": "empericalRateValues",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "rateMatrix",
            "type": "double[][]",
            "access": "read-only"
          },
          {
            "name": "relativeRates",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "stateCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "frequencies",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "Sum",
        "fullyQualifiedName": "beast.base.evolution.Sum",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 Sum",
        "extends": "beast.base.inference.CalculationNode",
        "implements": [
          "beast.base.core.Loggable",
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "arg",
            "type": "List<Function>",
            "description": "argument to be summed",
            "required": true,
            "default": "[]"
          },
          {
            "name": "tree",
            "type": "Tree",
            "description": "the tree corresponding to the function to be summed, indexing by node numbers assumed.",
            "required": false
          },
          {
            "name": "ignoreZeroBranchLengths",
            "type": "Boolean",
            "description": "true if quantities in the argument should only be summed for non-zero branch lengths.",
            "required": false,
            "default": "false"
          }
        ],
        "properties": [
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "ClusterTree",
        "fullyQualifiedName": "beast.base.evolution.tree.ClusterTree",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 ClusterTree",
        "extends": "beast.base.evolution.tree.Tree",
        "implements": [
          "beast.base.core.Loggable",
          "java.lang.Cloneable",
          "beast.base.inference.StateNodeInitialiser",
          "beast.base.core.Function",
          "beast.base.evolution.tree.TreeInterface",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "clusterType",
            "type": "ClusterTree.Type",
            "description": "type of clustering algorithm used for generating initial beast.tree. Should be one of [single, average, complete, upgma, mean, centroid, ward, adjcomplete, neighborjoining, neighborjoining2] (default average)",
            "required": false,
            "default": "average"
          },
          {
            "name": "taxa",
            "type": "Alignment",
            "description": "alignment data used for calculating distances for clustering",
            "required": false
          },
          {
            "name": "distance",
            "type": "Distance",
            "description": "method for calculating distance between two sequences (default Jukes Cantor)",
            "required": false
          },
          {
            "name": "clock.rate",
            "type": "Function",
            "description": "the clock rate parameter, used to divide all divergence times by, to convert from substitutions to times. (default 1.0)",
            "required": false,
            "default": "constant",
            "constraint": "positive"
          },
          {
            "name": "initial",
            "type": "Tree",
            "description": "tree to start with",
            "required": false
          },
          {
            "name": "trait",
            "type": "List<TraitSet>",
            "description": "trait information for initializing traits (like node dates) in the tree",
            "required": false,
            "default": "[]"
          },
          {
            "name": "taxonset",
            "type": "TaxonSet",
            "description": "set of taxa that correspond to the leafs in the tree",
            "required": false
          },
          {
            "name": "nodetype",
            "type": "String",
            "description": "type of the nodes in the beast.tree",
            "required": false,
            "default": "beast.base.evolution.tree.Node"
          },
          {
            "name": "adjustTreeNodeHeights",
            "type": "Boolean",
            "description": "if true (default), then tree node heights are adjusted to avoid non-positive branch lengths. If you want to maintain zero branch lengths then you must set this to false.",
            "required": false,
            "default": "true"
          },
          {
            "name": "estimate",
            "type": "Boolean",
            "description": "whether to estimate this item or keep constant to its initial value",
            "required": false,
            "default": "true"
          }
        ],
        "properties": [
          {
            "name": "root",
            "type": "Node",
            "access": "read-only"
          },
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "internalNodeCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "taxaNames",
            "type": "String[]",
            "access": "read-only"
          },
          {
            "name": "leafNodeCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "nodeCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "dateType",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "nodesAsArray",
            "type": "Node[]",
            "access": "read-only"
          },
          {
            "name": "externalNodes",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "internalNodes",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "taxonset",
            "type": "TaxonSet",
            "access": "read-only"
          },
          {
            "name": "dateTrait",
            "type": "TraitSet",
            "access": "read-only"
          },
          {
            "name": "directAncestorNodeCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "state",
            "type": "State",
            "access": "read-only"
          },
          {
            "name": "index",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "estimated",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "current",
            "type": "StateNode",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "BayesianSkyline",
        "fullyQualifiedName": "beast.base.evolution.tree.coalescent.BayesianSkyline",
        "isDistribution": true,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 BayesianSkyline",
        "extends": "beast.base.evolution.tree.TreeDistribution",
        "implements": [
          "beast.base.core.Loggable",
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface"
        ],
        "primaryArgument": {
          "name": "treeIntervals",
          "type": "TreeIntervals",
          "description": "Intervals for a phylogenetic beast tree",
          "required": false
        },
        "arguments": [
          {
            "name": "popSizes",
            "type": "Function",
            "description": "present-day population size. If time units are set to Units.EXPECTED_SUBSTITUTIONS thenthe N0 parameter will be interpreted as N0 * mu. Also note that if you are dealing with a diploid population N0 will be out by a factor of 2.",
            "required": true,
            "constraint": "positive-integer"
          },
          {
            "name": "groupSizes",
            "type": "IntegerParameter",
            "description": "the group sizes parameter",
            "required": true,
            "constraint": "positive-integer"
          },
          {
            "name": "tree",
            "type": "TreeInterface",
            "description": "tree over which to calculate a prior or likelihood",
            "required": false
          }
        ],
        "properties": [
          {
            "name": "conditions",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "parameterIds",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "arguments",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "currentLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "stochastic",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "storedLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "nonStochasticLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "Coalescent",
        "fullyQualifiedName": "beast.base.evolution.tree.coalescent.Coalescent",
        "isDistribution": true,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 Coalescent",
        "extends": "beast.base.evolution.tree.TreeDistribution",
        "implements": [
          "beast.base.core.Loggable",
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface"
        ],
        "primaryArgument": {
          "name": "treeIntervals",
          "type": "TreeIntervals",
          "description": "Intervals for a phylogenetic beast tree",
          "required": false
        },
        "arguments": [
          {
            "name": "populationModel",
            "type": "PopulationFunction",
            "description": "A population size model",
            "required": true
          },
          {
            "name": "tree",
            "type": "TreeInterface",
            "description": "tree over which to calculate a prior or likelihood",
            "required": false
          }
        ],
        "properties": [
          {
            "name": "conditions",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "arguments",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "currentLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "stochastic",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "storedLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "nonStochasticLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "CompoundPopulationFunction",
        "fullyQualifiedName": "beast.base.evolution.tree.coalescent.CompoundPopulationFunction",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 CompoundPopulationFunction",
        "extends": "beast.base.evolution.tree.coalescent.PopulationFunction$Abstract",
        "implements": [
          "beast.base.core.Loggable",
          "beast.base.evolution.tree.coalescent.PopulationFunction",
          "org.apache.commons.math.analysis.UnivariateRealFunction",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "populationSizes",
            "type": "RealParameter",
            "description": "population value at each point.",
            "required": true,
            "constraint": "positive-integer"
          },
          {
            "name": "populationIndicators",
            "type": "BooleanParameter",
            "description": "Include\/exclude population value from the population function.",
            "required": true
          },
          {
            "name": "itree",
            "type": "List<TreeIntervals>",
            "description": "Coalecent intervals of this tree are used in the compound population function.",
            "required": true,
            "default": "[]"
          },
          {
            "name": "type",
            "type": "String",
            "description": "Flavour of demographic: either linear or stepwise for  piecewise-linear or piecewise-constant.",
            "required": false,
            "default": "linear"
          },
          {
            "name": "useIntervalsMiddle",
            "type": "Boolean",
            "description": "When true, the demographic X axis points are in the middle of the coalescent intervals. By default they are at the beginning.",
            "required": false,
            "default": "false"
          }
        ],
        "properties": [
          {
            "name": "parameterIds",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "threshold",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "ConstantPopulation",
        "fullyQualifiedName": "beast.base.evolution.tree.coalescent.ConstantPopulation",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 ConstantPopulation",
        "extends": "beast.base.evolution.tree.coalescent.PopulationFunction$Abstract",
        "implements": [
          "beast.base.evolution.tree.coalescent.PopulationFunction",
          "org.apache.commons.math.analysis.UnivariateRealFunction",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "popSize",
            "type": "Function",
            "description": "constant (effective) population size value.",
            "required": true,
            "constraint": "positive-integer"
          }
        ],
        "properties": [
          {
            "name": "parameterIds",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "n0",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "threshold",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "ExponentialGrowth",
        "fullyQualifiedName": "beast.base.evolution.tree.coalescent.ExponentialGrowth",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 ExponentialGrowth",
        "extends": "beast.base.evolution.tree.coalescent.PopulationFunction$Abstract",
        "implements": [
          "beast.base.evolution.tree.coalescent.PopulationFunction",
          "org.apache.commons.math.analysis.UnivariateRealFunction",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "popSize",
            "type": "Function",
            "description": "present-day population size (defaults to 1.0). ",
            "required": false,
            "constraint": "positive-integer"
          },
          {
            "name": "growthRate",
            "type": "Function",
            "description": "Growth rate is the exponent of the exponential growth. A value of zero represents a constant population size, negative values represent decline towards the present, positive numbers represents exponential growth towards the present.",
            "required": false,
            "constraint": "positive"
          }
        ],
        "properties": [
          {
            "name": "parameterIds",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "growthRate",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "n0",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "threshold",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "RandomTree",
        "fullyQualifiedName": "beast.base.evolution.tree.coalescent.RandomTree",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 RandomTree",
        "extends": "beast.base.evolution.tree.Tree",
        "implements": [
          "beast.base.core.Loggable",
          "java.lang.Cloneable",
          "beast.base.inference.StateNodeInitialiser",
          "beast.base.core.Function",
          "beast.base.evolution.tree.TreeInterface",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "taxa",
            "type": "Alignment",
            "description": "set of taxa to initialise tree specified by alignment",
            "required": false
          },
          {
            "name": "populationModel",
            "type": "PopulationFunction",
            "description": "population function for generating coalescent???",
            "required": true
          },
          {
            "name": "constraint",
            "type": "List<MRCAPrior>",
            "description": "specifies (monophyletic or height distribution) constraints on internal nodes",
            "required": false,
            "default": "[]"
          },
          {
            "name": "rootHeight",
            "type": "Double",
            "description": "If specified the tree will be scaled to match the root height, if constraints allow this",
            "required": false
          },
          {
            "name": "initial",
            "type": "Tree",
            "description": "tree to start with",
            "required": false
          },
          {
            "name": "trait",
            "type": "List<TraitSet>",
            "description": "trait information for initializing traits (like node dates) in the tree",
            "required": false,
            "default": "[]"
          },
          {
            "name": "taxonset",
            "type": "TaxonSet",
            "description": "set of taxa that correspond to the leafs in the tree",
            "required": false
          },
          {
            "name": "nodetype",
            "type": "String",
            "description": "type of the nodes in the beast.tree",
            "required": false,
            "default": "beast.base.evolution.tree.Node"
          },
          {
            "name": "adjustTreeNodeHeights",
            "type": "Boolean",
            "description": "if true (default), then tree node heights are adjusted to avoid non-positive branch lengths. If you want to maintain zero branch lengths then you must set this to false.",
            "required": false,
            "default": "true"
          },
          {
            "name": "estimate",
            "type": "Boolean",
            "description": "whether to estimate this item or keep constant to its initial value",
            "required": false,
            "default": "true"
          }
        ],
        "properties": [
          {
            "name": "taxaNames",
            "type": "String[]",
            "access": "read-only"
          },
          {
            "name": "root",
            "type": "Node",
            "access": "read-only"
          },
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "internalNodeCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "leafNodeCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "nodeCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "dateType",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "nodesAsArray",
            "type": "Node[]",
            "access": "read-only"
          },
          {
            "name": "externalNodes",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "internalNodes",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "taxonset",
            "type": "TaxonSet",
            "access": "read-only"
          },
          {
            "name": "dateTrait",
            "type": "TraitSet",
            "access": "read-only"
          },
          {
            "name": "directAncestorNodeCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "state",
            "type": "State",
            "access": "read-only"
          },
          {
            "name": "index",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "estimated",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "current",
            "type": "StateNode",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "ScaledPopulationFunction",
        "fullyQualifiedName": "beast.base.evolution.tree.coalescent.ScaledPopulationFunction",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 ScaledPopulationFunction",
        "extends": "beast.base.evolution.tree.coalescent.PopulationFunction$Abstract",
        "implements": [
          "beast.base.evolution.tree.coalescent.PopulationFunction",
          "org.apache.commons.math.analysis.UnivariateRealFunction",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "population",
            "type": "PopulationFunction",
            "description": "population function to scale. ",
            "required": true
          },
          {
            "name": "factor",
            "type": "Function",
            "description": "scale population by this facor.",
            "required": true
          }
        ],
        "properties": [
          {
            "name": "parameterIds",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "threshold",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "MRCAPrior",
        "fullyQualifiedName": "beast.base.evolution.tree.MRCAPrior",
        "isDistribution": true,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 MRCAPrior",
        "extends": "beast.base.inference.Distribution",
        "implements": [
          "beast.base.core.Loggable",
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface"
        ],
        "primaryArgument": {
          "name": "tree",
          "type": "Tree",
          "description": "the tree containing the taxon set",
          "required": true
        },
        "arguments": [
          {
            "name": "taxonset",
            "type": "TaxonSet",
            "description": "set of taxa for which prior information is available",
            "required": false
          },
          {
            "name": "monophyletic",
            "type": "Boolean",
            "description": "whether the taxon set is monophyletic (forms a clade without other taxa) or nor. Default is false.",
            "required": false,
            "default": "false"
          },
          {
            "name": "distr",
            "type": "ParametricDistribution",
            "description": "distribution used to calculate prior over MRCA time, e.g. normal, beta, gamma. If not specified, monophyletic must be true",
            "required": false
          },
          {
            "name": "tipsonly",
            "type": "Boolean",
            "description": "flag to indicate tip dates are to be used instead of the MRCA node. If set to true, the prior is applied to the height of all tips in the taxonset and the monophyletic flag is ignored. Default is false.",
            "required": false,
            "default": "false"
          },
          {
            "name": "useOriginate",
            "type": "Boolean",
            "description": "Use parent of clade instead of clade. Cannot be used with tipsonly, or on the root.",
            "required": false,
            "default": "false"
          }
        ],
        "properties": [
          {
            "name": "conditions",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "commonAncestor",
            "type": "Node",
            "access": "read-only"
          },
          {
            "name": "arguments",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "currentLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "stochastic",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "storedLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "nonStochasticLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "Node",
        "fullyQualifiedName": "beast.base.evolution.tree.Node",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 Node",
        "extends": "beast.base.core.BEASTObject",
        "implements": [
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [],
        "properties": [
          {
            "name": "length",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "parent",
            "type": "Node",
            "access": "read-only"
          },
          {
            "name": "children",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "leaf",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "root",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "tree",
            "type": "Tree",
            "access": "read-only"
          },
          {
            "name": "dirty",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "date",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "internalNodeCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "leafNodeCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "nodeCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "allChildNodesAndSelf",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "newickMetaData",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "newickLengthMetaData",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "childrenMutable",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "allChildNodes",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "metaDataNames",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "lengthMetaDataNames",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "directAncestorChild",
            "type": "Node",
            "access": "read-only"
          },
          {
            "name": "fakeChild",
            "type": "Node",
            "access": "read-only"
          },
          {
            "name": "childCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "directAncestor",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "nonDirectAncestorChild",
            "type": "Node",
            "access": "read-only"
          },
          {
            "name": "allLeafNodes",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "height",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "nr",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "left",
            "type": "Node",
            "access": "read-only"
          },
          {
            "name": "right",
            "type": "Node",
            "access": "read-only"
          },
          {
            "name": "fake",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "TraitSet",
        "fullyQualifiedName": "beast.base.evolution.tree.TraitSet",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 TraitSet",
        "extends": "beast.base.core.BEASTObject",
        "implements": [
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "traitname",
            "type": "String",
            "description": "name of the trait, used as meta data name for the tree. Special traitnames that are recognized are 'age','date','date-forward' and 'date-backward'.",
            "required": true
          },
          {
            "name": "units",
            "type": "TraitSet.Units",
            "description": "name of the units in which values are posed, used for conversion to a real value. This can be [year, month, day] (default 'year')",
            "required": false,
            "default": "year"
          },
          {
            "name": "value",
            "type": "String",
            "description": "traits encoded as taxon=value pairs separated by commas",
            "required": true
          },
          {
            "name": "taxa",
            "type": "TaxonSet",
            "description": "contains list of taxa to map traits to",
            "required": true
          },
          {
            "name": "dateFormat",
            "type": "String",
            "description": "the date\/time format to be parsed, (e.g., 'dd\/M\/yyyy')",
            "required": false
          }
        ],
        "properties": [
          {
            "name": "numeric",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "dateType",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "taxonValues",
            "type": "String[]",
            "access": "read-only"
          },
          {
            "name": "traitName",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "dateTrait",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "Tree",
        "fullyQualifiedName": "beast.base.evolution.tree.Tree",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 Tree",
        "extends": "beast.base.inference.StateNode",
        "implements": [
          "beast.base.core.Loggable",
          "java.lang.Cloneable",
          "beast.base.core.Function",
          "beast.base.evolution.tree.TreeInterface",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "initial",
            "type": "Tree",
            "description": "tree to start with",
            "required": false
          },
          {
            "name": "trait",
            "type": "List<TraitSet>",
            "description": "trait information for initializing traits (like node dates) in the tree",
            "required": false,
            "default": "[]"
          },
          {
            "name": "taxonset",
            "type": "TaxonSet",
            "description": "set of taxa that correspond to the leafs in the tree",
            "required": false
          },
          {
            "name": "nodetype",
            "type": "String",
            "description": "type of the nodes in the beast.tree",
            "required": false,
            "default": "beast.base.evolution.tree.Node"
          },
          {
            "name": "adjustTreeNodeHeights",
            "type": "Boolean",
            "description": "if true (default), then tree node heights are adjusted to avoid non-positive branch lengths. If you want to maintain zero branch lengths then you must set this to false.",
            "required": false,
            "default": "true"
          },
          {
            "name": "estimate",
            "type": "Boolean",
            "description": "whether to estimate this item or keep constant to its initial value",
            "required": false,
            "default": "true"
          }
        ],
        "properties": [
          {
            "name": "root",
            "type": "Node",
            "access": "read-only"
          },
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "internalNodeCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "taxaNames",
            "type": "String[]",
            "access": "read-only"
          },
          {
            "name": "leafNodeCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "nodeCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "dateType",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "nodesAsArray",
            "type": "Node[]",
            "access": "read-only"
          },
          {
            "name": "externalNodes",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "internalNodes",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "taxonset",
            "type": "TaxonSet",
            "access": "read-only"
          },
          {
            "name": "dateTrait",
            "type": "TraitSet",
            "access": "read-only"
          },
          {
            "name": "directAncestorNodeCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "state",
            "type": "State",
            "access": "read-only"
          },
          {
            "name": "index",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "estimated",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "current",
            "type": "StateNode",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "TreeIntervals",
        "fullyQualifiedName": "beast.base.evolution.tree.TreeIntervals",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 TreeIntervals",
        "extends": "beast.base.inference.CalculationNode",
        "implements": [
          "beast.base.core.BEASTInterface",
          "beast.base.evolution.tree.IntervalList"
        ],
        "arguments": [
          {
            "name": "tree",
            "type": "Tree",
            "description": "tree for which to calculate the intervals",
            "required": true
          }
        ],
        "properties": [
          {
            "name": "intervalCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "sampleCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "totalDuration",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "binaryCoalescent",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "coalescentOnly",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "delta",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "TreeParser",
        "fullyQualifiedName": "beast.base.evolution.tree.TreeParser",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 TreeParser",
        "extends": "beast.base.evolution.tree.Tree",
        "implements": [
          "beast.base.core.Loggable",
          "java.lang.Cloneable",
          "beast.base.inference.StateNodeInitialiser",
          "beast.base.core.Function",
          "beast.base.evolution.tree.TreeInterface",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "IsLabelledNewick",
            "type": "Boolean",
            "description": "Is the newick tree labelled (alternatively contains node numbers)? Default=false.",
            "required": false,
            "default": "false"
          },
          {
            "name": "taxa",
            "type": "Alignment",
            "description": "Specifies the list of taxa represented by leaves in the beast.tree",
            "required": false
          },
          {
            "name": "newick",
            "type": "String",
            "description": "initial beast.tree represented in newick format",
            "required": false
          },
          {
            "name": "offset",
            "type": "Integer",
            "description": "offset if numbers are used for taxa (offset=the lowest taxa number) default=1",
            "required": false,
            "default": "1"
          },
          {
            "name": "threshold",
            "type": "Double",
            "description": "threshold under which node heights (derived from lengths) are set to zero. Default=0.",
            "required": false,
            "default": "0.0"
          },
          {
            "name": "singlechild",
            "type": "Boolean",
            "description": "flag to indicate that single child nodes are allowed. Default=true.",
            "required": false,
            "default": "true"
          },
          {
            "name": "adjustTipHeights",
            "type": "Boolean",
            "description": "flag to indicate if tipHeights shall be adjusted when date traits missing. Default=true.",
            "required": false,
            "default": "true"
          },
          {
            "name": "scale",
            "type": "Double",
            "description": "scale used to multiply internal node heights during parsing. Useful for importing starting from external programs, for instance, RaxML tree rooted using Path-o-gen.",
            "required": false,
            "default": "1.0",
            "constraint": "positive"
          },
          {
            "name": "binarizeMultifurcations",
            "type": "Boolean",
            "description": "Whether or not to turn multifurcations into sequences of bifurcations. (Default true.)",
            "required": false,
            "default": "true"
          },
          {
            "name": "initial",
            "type": "Tree",
            "description": "tree to start with",
            "required": false
          },
          {
            "name": "trait",
            "type": "List<TraitSet>",
            "description": "trait information for initializing traits (like node dates) in the tree",
            "required": false,
            "default": "[]"
          },
          {
            "name": "taxonset",
            "type": "TaxonSet",
            "description": "set of taxa that correspond to the leafs in the tree",
            "required": false
          },
          {
            "name": "nodetype",
            "type": "String",
            "description": "type of the nodes in the beast.tree",
            "required": false,
            "default": "beast.base.evolution.tree.Node"
          },
          {
            "name": "adjustTreeNodeHeights",
            "type": "Boolean",
            "description": "if true (default), then tree node heights are adjusted to avoid non-positive branch lengths. If you want to maintain zero branch lengths then you must set this to false.",
            "required": false,
            "default": "true"
          },
          {
            "name": "estimate",
            "type": "Boolean",
            "description": "whether to estimate this item or keep constant to its initial value",
            "required": false,
            "default": "true"
          }
        ],
        "properties": [
          {
            "name": "root",
            "type": "Node",
            "access": "read-only"
          },
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "internalNodeCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "taxaNames",
            "type": "String[]",
            "access": "read-only"
          },
          {
            "name": "leafNodeCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "nodeCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "dateType",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "nodesAsArray",
            "type": "Node[]",
            "access": "read-only"
          },
          {
            "name": "externalNodes",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "internalNodes",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "taxonset",
            "type": "TaxonSet",
            "access": "read-only"
          },
          {
            "name": "dateTrait",
            "type": "TraitSet",
            "access": "read-only"
          },
          {
            "name": "directAncestorNodeCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "state",
            "type": "State",
            "access": "read-only"
          },
          {
            "name": "index",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "estimated",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "current",
            "type": "StateNode",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "CompoundDistribution",
        "fullyQualifiedName": "beast.base.inference.CompoundDistribution",
        "isDistribution": true,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 CompoundDistribution",
        "extends": "beast.base.inference.Distribution",
        "implements": [
          "beast.base.core.Loggable",
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "distribution",
            "type": "List<Distribution>",
            "description": "individual probability distributions, e.g. the likelihood and prior making up a posterior",
            "required": false,
            "default": "[]"
          },
          {
            "name": "useThreads",
            "type": "Boolean",
            "description": "calculated the distributions in parallel using threads (default false)",
            "required": false,
            "default": "false"
          },
          {
            "name": "threads",
            "type": "Integer",
            "description": "maximum number of threads to use, if less than 1 the number of threads in BeastMCMC is used (default -1)",
            "required": false,
            "default": "-1"
          },
          {
            "name": "ignore",
            "type": "Boolean",
            "description": "ignore all distributions and return 1 as distribution (default false)",
            "required": false,
            "default": "false"
          }
        ],
        "properties": [
          {
            "name": "conditions",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "stochastic",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "nonStochasticLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "arguments",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "currentLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "storedLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "Beta",
        "fullyQualifiedName": "beast.base.inference.distribution.Beta",
        "isDistribution": true,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 Beta",
        "extends": "beast.base.inference.distribution.ParametricDistribution",
        "implements": [
          "beast.base.core.BEASTInterface",
          "org.apache.commons.math.distribution.ContinuousDistribution",
          "org.apache.commons.math.distribution.Distribution"
        ],
        "primaryArgument": {
          "name": "x",
          "type": "Function",
          "description": "Random variable (automatically wrapped in Prior)"
        },
        "arguments": [
          {
            "name": "alpha",
            "type": "Function",
            "description": "first shape parameter, defaults to 1",
            "required": false
          },
          {
            "name": "beta",
            "type": "Function",
            "description": "the other shape parameter, defaults to 1",
            "required": false
          },
          {
            "name": "offset",
            "type": "Double",
            "description": "offset of origin (defaults to 0)",
            "required": false,
            "default": "0.0"
          }
        ],
        "properties": [
          {
            "name": "distribution",
            "type": "ContinuousDistribution",
            "access": "read-only"
          },
          {
            "name": "offset",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "integerDistribution",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "mean",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "ChiSquare",
        "fullyQualifiedName": "beast.base.inference.distribution.ChiSquare",
        "isDistribution": true,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 ChiSquare",
        "extends": "beast.base.inference.distribution.ParametricDistribution",
        "implements": [
          "beast.base.core.BEASTInterface",
          "org.apache.commons.math.distribution.ContinuousDistribution",
          "org.apache.commons.math.distribution.Distribution"
        ],
        "primaryArgument": {
          "name": "x",
          "type": "Function",
          "description": "Random variable (automatically wrapped in Prior)"
        },
        "arguments": [
          {
            "name": "df",
            "type": "IntegerParameter",
            "description": "degrees if freedin, defaults to 1",
            "required": false
          },
          {
            "name": "offset",
            "type": "Double",
            "description": "offset of origin (defaults to 0)",
            "required": false,
            "default": "0.0"
          }
        ],
        "properties": [
          {
            "name": "distribution",
            "type": "ContinuousDistribution",
            "access": "read-only"
          },
          {
            "name": "offset",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "integerDistribution",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "mean",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "Dirichlet",
        "fullyQualifiedName": "beast.base.inference.distribution.Dirichlet",
        "isDistribution": true,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 Dirichlet",
        "extends": "beast.base.inference.distribution.ParametricDistribution",
        "implements": [
          "beast.base.core.BEASTInterface",
          "org.apache.commons.math.distribution.ContinuousDistribution",
          "org.apache.commons.math.distribution.Distribution"
        ],
        "primaryArgument": {
          "name": "x",
          "type": "Function",
          "description": "Random variable (automatically wrapped in Prior)"
        },
        "arguments": [
          {
            "name": "alpha",
            "type": "Function",
            "description": "coefficients of the Dirichlet distribution",
            "required": true
          },
          {
            "name": "offset",
            "type": "Double",
            "description": "offset of origin (defaults to 0)",
            "required": false,
            "default": "0.0"
          }
        ],
        "properties": [
          {
            "name": "distribution",
            "type": "Distribution",
            "access": "read-only"
          },
          {
            "name": "offset",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "integerDistribution",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "mean",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "Exponential",
        "fullyQualifiedName": "beast.base.inference.distribution.Exponential",
        "isDistribution": true,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 Exponential",
        "extends": "beast.base.inference.distribution.ParametricDistribution",
        "implements": [
          "beast.base.core.BEASTInterface",
          "org.apache.commons.math.distribution.ContinuousDistribution",
          "org.apache.commons.math.distribution.Distribution"
        ],
        "primaryArgument": {
          "name": "x",
          "type": "Function",
          "description": "Random variable (automatically wrapped in Prior)"
        },
        "arguments": [
          {
            "name": "mean",
            "type": "Function",
            "description": "mean parameter, defaults to 1",
            "required": false
          },
          {
            "name": "offset",
            "type": "Double",
            "description": "offset of origin (defaults to 0)",
            "required": false,
            "default": "0.0"
          }
        ],
        "properties": [
          {
            "name": "distribution",
            "type": "ContinuousDistribution",
            "access": "read-only"
          },
          {
            "name": "offset",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "integerDistribution",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "mean",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "Gamma",
        "fullyQualifiedName": "beast.base.inference.distribution.Gamma",
        "isDistribution": true,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 Gamma",
        "extends": "beast.base.inference.distribution.ParametricDistribution",
        "implements": [
          "beast.base.core.BEASTInterface",
          "org.apache.commons.math.distribution.ContinuousDistribution",
          "org.apache.commons.math.distribution.Distribution"
        ],
        "primaryArgument": {
          "name": "x",
          "type": "Function",
          "description": "Random variable (automatically wrapped in Prior)"
        },
        "arguments": [
          {
            "name": "alpha",
            "type": "Function",
            "description": "shape parameter, defaults to 2",
            "required": false
          },
          {
            "name": "beta",
            "type": "Function",
            "description": "second parameter depends on mode, defaults to 2.For mode=ShapeScale beta is interpreted as scale. For mode=ShapeRate beta is interpreted as rate. For mode=ShapeMean beta is interpreted as mean.For mode=OneParameter beta is ignored.",
            "required": false
          },
          {
            "name": "mode",
            "type": "Gamma.mode",
            "description": "determines parameterisation. For ShapeScale beta is interpreted as scale. For ShapeRate beta is interpreted as rate. For ShapeMean beta is interpreted as mean.For OneParameter beta is ignored.",
            "required": false,
            "default": "ShapeScale"
          },
          {
            "name": "offset",
            "type": "Double",
            "description": "offset of origin (defaults to 0)",
            "required": false,
            "default": "0.0"
          }
        ],
        "properties": [
          {
            "name": "distribution",
            "type": "ContinuousDistribution",
            "access": "read-only"
          },
          {
            "name": "offset",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "integerDistribution",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "mean",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "InverseGamma",
        "fullyQualifiedName": "beast.base.inference.distribution.InverseGamma",
        "isDistribution": true,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 InverseGamma",
        "extends": "beast.base.inference.distribution.ParametricDistribution",
        "implements": [
          "beast.base.core.BEASTInterface",
          "org.apache.commons.math.distribution.ContinuousDistribution",
          "org.apache.commons.math.distribution.Distribution"
        ],
        "primaryArgument": {
          "name": "x",
          "type": "Function",
          "description": "Random variable (automatically wrapped in Prior)"
        },
        "arguments": [
          {
            "name": "alpha",
            "type": "Function",
            "description": "shape parameter, defaults to 2",
            "required": false
          },
          {
            "name": "beta",
            "type": "Function",
            "description": "scale parameter, defaults to 2",
            "required": false
          },
          {
            "name": "offset",
            "type": "Double",
            "description": "offset of origin (defaults to 0)",
            "required": false,
            "default": "0.0"
          }
        ],
        "properties": [
          {
            "name": "distribution",
            "type": "Distribution",
            "access": "read-only"
          },
          {
            "name": "meanWithoutOffset",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "offset",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "integerDistribution",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "mean",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "LaplaceDistribution",
        "fullyQualifiedName": "beast.base.inference.distribution.LaplaceDistribution",
        "isDistribution": true,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 LaplaceDistribution",
        "extends": "beast.base.inference.distribution.ParametricDistribution",
        "implements": [
          "beast.base.core.BEASTInterface",
          "org.apache.commons.math.distribution.ContinuousDistribution",
          "org.apache.commons.math.distribution.Distribution"
        ],
        "primaryArgument": {
          "name": "x",
          "type": "Function",
          "description": "Random variable (automatically wrapped in Prior)"
        },
        "arguments": [
          {
            "name": "mu",
            "type": "Function",
            "description": "location parameter, defaults to 0",
            "required": false
          },
          {
            "name": "scale",
            "type": "Function",
            "description": "scale parameter, defaults to 1",
            "required": false,
            "constraint": "positive"
          },
          {
            "name": "offset",
            "type": "Double",
            "description": "offset of origin (defaults to 0)",
            "required": false,
            "default": "0.0"
          }
        ],
        "properties": [
          {
            "name": "distribution",
            "type": "ContinuousDistribution",
            "access": "read-only"
          },
          {
            "name": "offset",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "integerDistribution",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "mean",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "LogNormalDistributionModel",
        "fullyQualifiedName": "beast.base.inference.distribution.LogNormalDistributionModel",
        "isDistribution": true,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 LogNormalDistributionModel",
        "extends": "beast.base.inference.distribution.ParametricDistribution",
        "implements": [
          "beast.base.core.BEASTInterface",
          "org.apache.commons.math.distribution.ContinuousDistribution",
          "org.apache.commons.math.distribution.Distribution"
        ],
        "primaryArgument": {
          "name": "x",
          "type": "Function",
          "description": "Random variable (automatically wrapped in Prior)"
        },
        "arguments": [
          {
            "name": "M",
            "type": "Function",
            "description": "M parameter of lognormal distribution. Equal to the mean of the log-transformed distribution.",
            "required": false
          },
          {
            "name": "S",
            "type": "Function",
            "description": "S parameter of lognormal distribution. Equal to the standard deviation of the log-transformed distribution.",
            "required": false
          },
          {
            "name": "meanInRealSpace",
            "type": "Boolean",
            "description": "Whether the M parameter is in real space, or in log-transformed space. Default false = log-transformed.",
            "required": false,
            "default": "false"
          },
          {
            "name": "offset",
            "type": "Double",
            "description": "offset of origin (defaults to 0)",
            "required": false,
            "default": "0.0"
          }
        ],
        "properties": [
          {
            "name": "distribution",
            "type": "Distribution",
            "access": "read-only"
          },
          {
            "name": "offset",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "integerDistribution",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "mean",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "MarkovChainDistribution",
        "fullyQualifiedName": "beast.base.inference.distribution.MarkovChainDistribution",
        "isDistribution": true,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 MarkovChainDistribution",
        "extends": "beast.base.inference.Distribution",
        "implements": [
          "beast.base.core.Loggable",
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface"
        ],
        "primaryArgument": {
          "name": "parameter",
          "type": "Function",
          "description": "chain parameter to calculate distribution over",
          "required": true
        },
        "arguments": [
          {
            "name": "jeffreys",
            "type": "Boolean",
            "description": "use Jeffrey's prior (default false)",
            "required": false,
            "default": "false"
          },
          {
            "name": "reverse",
            "type": "Boolean",
            "description": "parameter in reverse (default false)",
            "required": false,
            "default": "false"
          },
          {
            "name": "uselog",
            "type": "Boolean",
            "description": "use logarithm of parameter values (default false)",
            "required": false,
            "default": "false"
          },
          {
            "name": "shape",
            "type": "Double",
            "description": "shape parameter of the Gamma distribution (default 1.0 = exponential distribution)  or precision parameter if the log normal is used.",
            "required": false,
            "default": "1.0"
          },
          {
            "name": "initialMean",
            "type": "Function",
            "description": "the mean of the prior distribution on the first element. This is an alternative boundary condition to Jeffrey's on the first value.",
            "required": false
          },
          {
            "name": "useLogNormal",
            "type": "Boolean",
            "description": "use Log Normal distribution instead of Gamma (default false)",
            "required": false,
            "default": "false"
          }
        ],
        "properties": [
          {
            "name": "conditions",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "arguments",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "currentLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "stochastic",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "storedLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "nonStochasticLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "Normal",
        "fullyQualifiedName": "beast.base.inference.distribution.Normal",
        "isDistribution": true,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 Normal",
        "extends": "beast.base.inference.distribution.ParametricDistribution",
        "implements": [
          "beast.base.core.BEASTInterface",
          "org.apache.commons.math.distribution.ContinuousDistribution",
          "org.apache.commons.math.distribution.Distribution"
        ],
        "primaryArgument": {
          "name": "x",
          "type": "Function",
          "description": "Random variable (automatically wrapped in Prior)"
        },
        "arguments": [
          {
            "name": "mean",
            "type": "Function",
            "description": "mean of the normal distribution, defaults to 0",
            "required": false
          },
          {
            "name": "sigma",
            "type": "Function",
            "description": "standard deviation of the normal distribution, defaults to 1",
            "required": false
          },
          {
            "name": "tau",
            "type": "Function",
            "description": "precision of the normal distribution, defaults to 1",
            "required": false
          },
          {
            "name": "offset",
            "type": "Double",
            "description": "offset of origin (defaults to 0)",
            "required": false,
            "default": "0.0"
          }
        ],
        "properties": [
          {
            "name": "distribution",
            "type": "ContinuousDistribution",
            "access": "read-only"
          },
          {
            "name": "meanWithoutOffset",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "offset",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "integerDistribution",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "mean",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "OneOnX",
        "fullyQualifiedName": "beast.base.inference.distribution.OneOnX",
        "isDistribution": true,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 OneOnX",
        "extends": "beast.base.inference.distribution.ParametricDistribution",
        "implements": [
          "beast.base.core.BEASTInterface",
          "org.apache.commons.math.distribution.ContinuousDistribution",
          "org.apache.commons.math.distribution.Distribution"
        ],
        "primaryArgument": {
          "name": "x",
          "type": "Function",
          "description": "Random variable (automatically wrapped in Prior)"
        },
        "arguments": [
          {
            "name": "offset",
            "type": "Double",
            "description": "offset of origin (defaults to 0)",
            "required": false,
            "default": "0.0"
          }
        ],
        "properties": [
          {
            "name": "distribution",
            "type": "Distribution",
            "access": "read-only"
          },
          {
            "name": "offset",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "integerDistribution",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "mean",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "Poisson",
        "fullyQualifiedName": "beast.base.inference.distribution.Poisson",
        "isDistribution": true,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 Poisson",
        "extends": "beast.base.inference.distribution.ParametricDistribution",
        "implements": [
          "beast.base.core.BEASTInterface",
          "org.apache.commons.math.distribution.ContinuousDistribution",
          "org.apache.commons.math.distribution.Distribution"
        ],
        "primaryArgument": {
          "name": "x",
          "type": "Function",
          "description": "Random variable (automatically wrapped in Prior)"
        },
        "arguments": [
          {
            "name": "lambda",
            "type": "Function",
            "description": "rate parameter, defaults to 1",
            "required": false
          },
          {
            "name": "offset",
            "type": "Double",
            "description": "offset of origin (defaults to 0)",
            "required": false,
            "default": "0.0"
          }
        ],
        "properties": [
          {
            "name": "distribution",
            "type": "Distribution",
            "access": "read-only"
          },
          {
            "name": "meanWithoutOffset",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "offset",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "integerDistribution",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "mean",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "Prior",
        "fullyQualifiedName": "beast.base.inference.distribution.Prior",
        "isDistribution": true,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 Prior",
        "extends": "beast.base.inference.Distribution",
        "implements": [
          "beast.base.core.Loggable",
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface"
        ],
        "primaryArgument": {
          "name": "x",
          "type": "Function",
          "description": "point at which the density is calculated",
          "required": true
        },
        "arguments": [
          {
            "name": "distr",
            "type": "ParametricDistribution",
            "description": "distribution used to calculate prior, e.g. normal, beta, gamma.",
            "required": true
          }
        ],
        "properties": [
          {
            "name": "conditions",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "parameterName",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "arguments",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "currentLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "stochastic",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "storedLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "nonStochasticLogP",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "Uniform",
        "fullyQualifiedName": "beast.base.inference.distribution.Uniform",
        "isDistribution": true,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 Uniform",
        "extends": "beast.base.inference.distribution.ParametricDistribution",
        "implements": [
          "beast.base.core.BEASTInterface",
          "org.apache.commons.math.distribution.ContinuousDistribution",
          "org.apache.commons.math.distribution.Distribution"
        ],
        "primaryArgument": {
          "name": "x",
          "type": "Function",
          "description": "Random variable (automatically wrapped in Prior)"
        },
        "arguments": [
          {
            "name": "lower",
            "type": "Double",
            "description": "lower bound on the interval, default 0",
            "required": false,
            "default": "0.0"
          },
          {
            "name": "upper",
            "type": "Double",
            "description": "lower bound on the interval, default 1",
            "required": false,
            "default": "1.0"
          },
          {
            "name": "offset",
            "type": "Double",
            "description": "offset of origin (defaults to 0)",
            "required": false,
            "default": "0.0"
          }
        ],
        "properties": [
          {
            "name": "distribution",
            "type": "Distribution",
            "access": "read-only"
          },
          {
            "name": "offset",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "integerDistribution",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "mean",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "BooleanParameter",
        "fullyQualifiedName": "beast.base.inference.parameter.BooleanParameter",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 BooleanParameter",
        "extends": "beast.base.inference.parameter.Parameter$Base",
        "implements": [
          "beast.base.core.Loggable",
          "java.lang.Cloneable",
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface",
          "beast.base.inference.parameter.Parameter"
        ],
        "arguments": [
          {
            "name": "value",
            "type": "List<T>",
            "description": "start value(s) for this parameter. If multiple values are specified, they should be separated by whitespace.",
            "required": true,
            "default": "[]"
          },
          {
            "name": "dimension",
            "type": "Integer",
            "description": "dimension of the parameter (default 1, i.e scalar)",
            "required": false,
            "default": "1",
            "constraint": "positive-integer"
          },
          {
            "name": "minordimension",
            "type": "Integer",
            "description": "minor-dimension when the parameter is interpreted as a matrix (default 1)",
            "required": false,
            "default": "1",
            "constraint": "positive-integer"
          },
          {
            "name": "keys",
            "type": "String",
            "description": "the keys (unique dimension names) for the dimensions of this parameter",
            "required": false
          },
          {
            "name": "estimate",
            "type": "Boolean",
            "description": "whether to estimate this item or keep constant to its initial value",
            "required": false,
            "default": "true"
          }
        ],
        "properties": [
          {
            "name": "value",
            "type": "Object",
            "access": "read-only"
          },
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "keys",
            "type": "String[]",
            "access": "read-only"
          },
          {
            "name": "lower",
            "type": "Object",
            "access": "read-only"
          },
          {
            "name": "upper",
            "type": "Object",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "lastDirty",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "storedValues",
            "type": "Object[]",
            "access": "read-only"
          },
          {
            "name": "minorDimension1",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "minorDimension2",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "keysList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "values",
            "type": "Object[]",
            "access": "read-only"
          },
          {
            "name": "state",
            "type": "State",
            "access": "read-only"
          },
          {
            "name": "index",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "estimated",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "current",
            "type": "StateNode",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "columnCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "rowCount",
            "type": "int",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "BooleanParameterList",
        "fullyQualifiedName": "beast.base.inference.parameter.BooleanParameterList",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 BooleanParameterList",
        "extends": "beast.base.inference.parameter.GeneralParameterList",
        "implements": [
          "beast.base.core.Loggable",
          "java.lang.Cloneable",
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "initialParam",
            "type": "List<Parameter.Base>",
            "description": "Parameter whose value will initially be in parameter list.",
            "required": false,
            "default": "[]"
          },
          {
            "name": "dimension",
            "type": "Integer",
            "description": "Dimension of individual parameters in list.  Default 1.",
            "required": false,
            "default": "1",
            "constraint": "positive-integer"
          },
          {
            "name": "minordimension",
            "type": "Integer",
            "description": "Minor dimension of individual parameters in list. Default 1.",
            "required": false,
            "default": "1",
            "constraint": "positive-integer"
          },
          {
            "name": "estimate",
            "type": "Boolean",
            "description": "whether to estimate this item or keep constant to its initial value",
            "required": false,
            "default": "true"
          }
        ],
        "properties": [
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "state",
            "type": "State",
            "access": "read-only"
          },
          {
            "name": "index",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "estimated",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "current",
            "type": "StateNode",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "CompoundRealParameter",
        "fullyQualifiedName": "beast.base.inference.parameter.CompoundRealParameter",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 CompoundRealParameter",
        "extends": "beast.base.inference.parameter.RealParameter",
        "implements": [
          "beast.base.core.Loggable",
          "java.lang.Cloneable",
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface",
          "beast.base.inference.parameter.Parameter"
        ],
        "arguments": [
          {
            "name": "parameter",
            "type": "List<RealParameter>",
            "description": "parameters making up the compound parameter",
            "required": true,
            "default": "[]"
          },
          {
            "name": "lower",
            "type": "Double",
            "description": "lower value for this parameter (default -infinity)",
            "required": false
          },
          {
            "name": "upper",
            "type": "Double",
            "description": "upper value for this parameter (default +infinity)",
            "required": false
          },
          {
            "name": "value",
            "type": "List<T>",
            "description": "start value(s) for this parameter. If multiple values are specified, they should be separated by whitespace.",
            "required": false,
            "default": "[]"
          },
          {
            "name": "dimension",
            "type": "Integer",
            "description": "dimension of the parameter (default 1, i.e scalar)",
            "required": false,
            "default": "1",
            "constraint": "positive-integer"
          },
          {
            "name": "minordimension",
            "type": "Integer",
            "description": "minor-dimension when the parameter is interpreted as a matrix (default 1)",
            "required": false,
            "default": "1",
            "constraint": "positive-integer"
          },
          {
            "name": "keys",
            "type": "String",
            "description": "the keys (unique dimension names) for the dimensions of this parameter",
            "required": false
          },
          {
            "name": "estimate",
            "type": "Boolean",
            "description": "whether to estimate this item or keep constant to its initial value",
            "required": false,
            "default": "true"
          }
        ],
        "properties": [
          {
            "name": "value",
            "type": "Object",
            "access": "read-only"
          },
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "current",
            "type": "StateNode",
            "access": "read-only"
          },
          {
            "name": "keys",
            "type": "String[]",
            "access": "read-only"
          },
          {
            "name": "lower",
            "type": "Object",
            "access": "read-only"
          },
          {
            "name": "upper",
            "type": "Object",
            "access": "read-only"
          },
          {
            "name": "lastDirty",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "storedValues",
            "type": "Object[]",
            "access": "read-only"
          },
          {
            "name": "minorDimension1",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "minorDimension2",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "keysList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "values",
            "type": "Object[]",
            "access": "read-only"
          },
          {
            "name": "state",
            "type": "State",
            "access": "read-only"
          },
          {
            "name": "index",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "estimated",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "columnCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "rowCount",
            "type": "int",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "CompoundValuable",
        "fullyQualifiedName": "beast.base.inference.parameter.CompoundValuable",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 CompoundValuable",
        "extends": "beast.base.inference.CalculationNode",
        "implements": [
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "var",
            "type": "List<BEASTObject>",
            "description": "reference to a valuable",
            "required": true,
            "default": "[]"
          }
        ],
        "properties": [
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "IntegerParameter",
        "fullyQualifiedName": "beast.base.inference.parameter.IntegerParameter",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 IntegerParameter",
        "extends": "beast.base.inference.parameter.Parameter$Base",
        "implements": [
          "beast.base.core.Loggable",
          "java.lang.Cloneable",
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface",
          "beast.base.inference.parameter.Parameter"
        ],
        "arguments": [
          {
            "name": "lower",
            "type": "Integer",
            "description": "lower value for this parameter (default -infinity)",
            "required": false
          },
          {
            "name": "upper",
            "type": "Integer",
            "description": "upper value for this parameter  (default +infinity)",
            "required": false
          },
          {
            "name": "value",
            "type": "List<T>",
            "description": "start value(s) for this parameter. If multiple values are specified, they should be separated by whitespace.",
            "required": true,
            "default": "[]"
          },
          {
            "name": "dimension",
            "type": "Integer",
            "description": "dimension of the parameter (default 1, i.e scalar)",
            "required": false,
            "default": "1",
            "constraint": "positive-integer"
          },
          {
            "name": "minordimension",
            "type": "Integer",
            "description": "minor-dimension when the parameter is interpreted as a matrix (default 1)",
            "required": false,
            "default": "1",
            "constraint": "positive-integer"
          },
          {
            "name": "keys",
            "type": "String",
            "description": "the keys (unique dimension names) for the dimensions of this parameter",
            "required": false
          },
          {
            "name": "estimate",
            "type": "Boolean",
            "description": "whether to estimate this item or keep constant to its initial value",
            "required": false,
            "default": "true"
          }
        ],
        "properties": [
          {
            "name": "value",
            "type": "Object",
            "access": "read-only"
          },
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "keys",
            "type": "String[]",
            "access": "read-only"
          },
          {
            "name": "lower",
            "type": "Object",
            "access": "read-only"
          },
          {
            "name": "upper",
            "type": "Object",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "lastDirty",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "storedValues",
            "type": "Object[]",
            "access": "read-only"
          },
          {
            "name": "minorDimension1",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "minorDimension2",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "keysList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "values",
            "type": "Object[]",
            "access": "read-only"
          },
          {
            "name": "state",
            "type": "State",
            "access": "read-only"
          },
          {
            "name": "index",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "estimated",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "current",
            "type": "StateNode",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "columnCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "rowCount",
            "type": "int",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "IntegerParameterList",
        "fullyQualifiedName": "beast.base.inference.parameter.IntegerParameterList",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 IntegerParameterList",
        "extends": "beast.base.inference.parameter.GeneralParameterList",
        "implements": [
          "beast.base.core.Loggable",
          "java.lang.Cloneable",
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "lower",
            "type": "Integer",
            "description": "Lower bound on parameter values.",
            "required": false,
            "default": "-2147483647"
          },
          {
            "name": "upper",
            "type": "Integer",
            "description": "Upper bound on parameter values.",
            "required": false,
            "default": "2147483646"
          },
          {
            "name": "initialParam",
            "type": "List<Parameter.Base>",
            "description": "Parameter whose value will initially be in parameter list.",
            "required": false,
            "default": "[]"
          },
          {
            "name": "dimension",
            "type": "Integer",
            "description": "Dimension of individual parameters in list.  Default 1.",
            "required": false,
            "default": "1",
            "constraint": "positive-integer"
          },
          {
            "name": "minordimension",
            "type": "Integer",
            "description": "Minor dimension of individual parameters in list. Default 1.",
            "required": false,
            "default": "1",
            "constraint": "positive-integer"
          },
          {
            "name": "estimate",
            "type": "Boolean",
            "description": "whether to estimate this item or keep constant to its initial value",
            "required": false,
            "default": "true"
          }
        ],
        "properties": [
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "state",
            "type": "State",
            "access": "read-only"
          },
          {
            "name": "index",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "estimated",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "current",
            "type": "StateNode",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "RealParameter",
        "fullyQualifiedName": "beast.base.inference.parameter.RealParameter",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 RealParameter",
        "extends": "beast.base.inference.parameter.Parameter$Base",
        "implements": [
          "beast.base.core.Loggable",
          "java.lang.Cloneable",
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface",
          "beast.base.inference.parameter.Parameter"
        ],
        "arguments": [
          {
            "name": "lower",
            "type": "Double",
            "description": "lower value for this parameter (default -infinity)",
            "required": false
          },
          {
            "name": "upper",
            "type": "Double",
            "description": "upper value for this parameter (default +infinity)",
            "required": false
          },
          {
            "name": "value",
            "type": "List<T>",
            "description": "start value(s) for this parameter. If multiple values are specified, they should be separated by whitespace.",
            "required": true,
            "default": "[]"
          },
          {
            "name": "dimension",
            "type": "Integer",
            "description": "dimension of the parameter (default 1, i.e scalar)",
            "required": false,
            "default": "1",
            "constraint": "positive-integer"
          },
          {
            "name": "minordimension",
            "type": "Integer",
            "description": "minor-dimension when the parameter is interpreted as a matrix (default 1)",
            "required": false,
            "default": "1",
            "constraint": "positive-integer"
          },
          {
            "name": "keys",
            "type": "String",
            "description": "the keys (unique dimension names) for the dimensions of this parameter",
            "required": false
          },
          {
            "name": "estimate",
            "type": "Boolean",
            "description": "whether to estimate this item or keep constant to its initial value",
            "required": false,
            "default": "true"
          }
        ],
        "properties": [
          {
            "name": "value",
            "type": "Object",
            "access": "read-only"
          },
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "keys",
            "type": "String[]",
            "access": "read-only"
          },
          {
            "name": "lower",
            "type": "Object",
            "access": "read-only"
          },
          {
            "name": "upper",
            "type": "Object",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "lastDirty",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "storedValues",
            "type": "Object[]",
            "access": "read-only"
          },
          {
            "name": "minorDimension1",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "minorDimension2",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "keysList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "values",
            "type": "Object[]",
            "access": "read-only"
          },
          {
            "name": "state",
            "type": "State",
            "access": "read-only"
          },
          {
            "name": "index",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "estimated",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "current",
            "type": "StateNode",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          },
          {
            "name": "columnCount",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "rowCount",
            "type": "int",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "RealParameterList",
        "fullyQualifiedName": "beast.base.inference.parameter.RealParameterList",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 RealParameterList",
        "extends": "beast.base.inference.parameter.GeneralParameterList",
        "implements": [
          "beast.base.core.Loggable",
          "java.lang.Cloneable",
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "lower",
            "type": "Double",
            "description": "Lower bound on parameter values.",
            "required": false,
            "default": "-Infinity"
          },
          {
            "name": "upper",
            "type": "Double",
            "description": "Upper bound on parameter values.",
            "required": false,
            "default": "Infinity"
          },
          {
            "name": "initialParam",
            "type": "List<Parameter.Base>",
            "description": "Parameter whose value will initially be in parameter list.",
            "required": false,
            "default": "[]"
          },
          {
            "name": "dimension",
            "type": "Integer",
            "description": "Dimension of individual parameters in list.  Default 1.",
            "required": false,
            "default": "1",
            "constraint": "positive-integer"
          },
          {
            "name": "minordimension",
            "type": "Integer",
            "description": "Minor dimension of individual parameters in list. Default 1.",
            "required": false,
            "default": "1",
            "constraint": "positive-integer"
          },
          {
            "name": "estimate",
            "type": "Boolean",
            "description": "whether to estimate this item or keep constant to its initial value",
            "required": false,
            "default": "true"
          }
        ],
        "properties": [
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "state",
            "type": "State",
            "access": "read-only"
          },
          {
            "name": "index",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "estimated",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "current",
            "type": "StateNode",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "State",
        "fullyQualifiedName": "beast.base.inference.State",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 State",
        "extends": "beast.base.core.BEASTObject",
        "implements": [
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "stateNode",
            "type": "List<StateNode>",
            "description": "anything that is part of the state",
            "required": false,
            "default": "[]"
          },
          {
            "name": "storeEvery",
            "type": "Integer",
            "description": "store the state to disk every X number of samples so that we can resume computation later on if the process failed half-way.",
            "required": false,
            "default": "-1"
          },
          {
            "name": "experimental",
            "type": "Boolean",
            "description": "Use experimental code to calculate calcNodePath.",
            "required": false,
            "default": "false"
          }
        ],
        "properties": [
          {
            "name": "currentCalculationNodes",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "nrOfStateNodes",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "ESS",
        "fullyQualifiedName": "beast.base.inference.util.ESS",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 ESS",
        "extends": "beast.base.core.BEASTObject",
        "implements": [
          "beast.base.core.Loggable",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "arg",
            "type": "Function",
            "description": "value (e.g. parameter or distribution) to report ESS for",
            "required": true
          }
        ],
        "properties": [
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "RPNcalculator",
        "fullyQualifiedName": "beast.base.inference.util.RPNcalculator",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": false,
        "package": "BEAST.base",
        "description": "BEAST2 RPNcalculator",
        "extends": "beast.base.inference.CalculationNode",
        "implements": [
          "beast.base.core.Loggable",
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [
          {
            "name": "expression",
            "type": "String",
            "description": "Expressions needed for the calculations",
            "required": true
          },
          {
            "name": "parameter",
            "type": "List<Function>",
            "description": "Parameters needed for the calculations",
            "required": false,
            "default": "[]"
          },
          {
            "name": "argnames",
            "type": "String",
            "description": "names of arguments used in expression (comma delimited), order as given by XML",
            "required": false
          }
        ],
        "properties": [
          {
            "name": "arrayValue",
            "type": "double",
            "access": "read-only"
          },
          {
            "name": "dimension",
            "type": "int",
            "access": "read-only"
          },
          {
            "name": "arguments",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "dirtyCalculation",
            "type": "boolean",
            "access": "read-only"
          },
          {
            "name": "inputs",
            "type": "Map",
            "access": "read-only"
          },
          {
            "name": "outputs",
            "type": "Set",
            "access": "read-only"
          },
          {
            "name": "citations",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "citationList",
            "type": "List",
            "access": "read-only"
          },
          {
            "name": "citation",
            "type": "Citation",
            "access": "read-only"
          },
          {
            "name": "description",
            "type": "String",
            "access": "read-only"
          },
          {
            "name": "doubleValues",
            "type": "double[]",
            "access": "read-only"
          }
        ]
      },
      {
        "name": "StarBeastStartState.Method",
        "fullyQualifiedName": "beast.base.evolution.speciation.StarBeastStartState$Method",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": true,
        "package": "beast.base.evolution.speciation",
        "description": "Enum type for StarBeastStartState",
        "implements": [
          "java.lang.constant.Constable",
          "java.lang.Comparable",
          "java.io.Serializable"
        ],
        "properties": [
          {
            "name": "values",
            "type": "String[]",
            "access": "read-only",
            "value": [
              "point-estimate",
              "random"
            ]
          }
        ],
        "arguments": []
      },
      {
        "name": "SubstitutionModel.Base",
        "fullyQualifiedName": "beast.base.evolution.substitutionmodel.SubstitutionModel$Base",
        "isDistribution": false,
        "isAbstract": true,
        "isInterface": false,
        "isEnum": false,
        "package": "beast.base.evolution.substitutionmodel",
        "description": "Inner type of SubstitutionModel",
        "extends": "beast.base.inference.CalculationNode",
        "implements": [
          "beast.base.evolution.substitutionmodel.SubstitutionModel",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [],
        "properties": []
      },
      {
        "name": "TreeLikelihood.Scaling",
        "fullyQualifiedName": "beast.base.evolution.likelihood.TreeLikelihood$Scaling",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": true,
        "package": "beast.base.evolution.likelihood",
        "description": "Enum type for TreeLikelihood",
        "implements": [
          "java.lang.constant.Constable",
          "java.lang.Comparable",
          "java.io.Serializable"
        ],
        "properties": [
          {
            "name": "values",
            "type": "String[]",
            "access": "read-only",
            "value": [
              "none",
              "always",
              "_default"
            ]
          }
        ],
        "arguments": []
      },
      {
        "name": "TraitSet.Units",
        "fullyQualifiedName": "beast.base.evolution.tree.TraitSet$Units",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": true,
        "package": "beast.base.evolution.tree",
        "description": "Enum type for TraitSet",
        "implements": [
          "java.lang.constant.Constable",
          "java.lang.Comparable",
          "java.io.Serializable"
        ],
        "properties": [
          {
            "name": "values",
            "type": "String[]",
            "access": "read-only",
            "value": [
              "year",
              "month",
              "day"
            ]
          }
        ],
        "arguments": []
      },
      {
        "name": "CalibratedBirthDeathModel.Type",
        "fullyQualifiedName": "beast.base.evolution.speciation.CalibratedBirthDeathModel$Type",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": true,
        "package": "beast.base.evolution.speciation",
        "description": "Enum type for CalibratedBirthDeathModel",
        "implements": [
          "java.lang.constant.Constable",
          "java.lang.Comparable",
          "java.io.Serializable"
        ],
        "properties": [
          {
            "name": "values",
            "type": "String[]",
            "access": "read-only",
            "value": [
              "none",
              "full",
              "restricted"
            ]
          }
        ],
        "arguments": []
      },
      {
        "name": "BinaryCovarion.MODE",
        "fullyQualifiedName": "beast.base.evolution.substitutionmodel.BinaryCovarion$MODE",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": true,
        "package": "beast.base.evolution.substitutionmodel",
        "description": "Enum type for BinaryCovarion",
        "implements": [
          "java.lang.constant.Constable",
          "java.lang.Comparable",
          "java.io.Serializable"
        ],
        "properties": [
          {
            "name": "values",
            "type": "String[]",
            "access": "read-only",
            "value": [
              "BEAST",
              "REVERSIBLE",
              "TUFFLEYSTEEL"
            ]
          }
        ],
        "arguments": []
      },
      {
        "name": "ClusterTree.Type",
        "fullyQualifiedName": "beast.base.evolution.tree.ClusterTree$Type",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": true,
        "package": "beast.base.evolution.tree",
        "description": "Enum type for ClusterTree",
        "implements": [
          "java.lang.constant.Constable",
          "java.lang.Comparable",
          "java.io.Serializable"
        ],
        "properties": [
          {
            "name": "values",
            "type": "String[]",
            "access": "read-only",
            "value": [
              "single",
              "average",
              "complete",
              "upgma",
              "mean",
              "centroid",
              "ward",
              "adjcomplete",
              "neighborjoining",
              "neighborjoining2"
            ]
          }
        ],
        "arguments": []
      },
      {
        "name": "ThreadedTreeLikelihood.Scaling",
        "fullyQualifiedName": "beast.base.evolution.likelihood.ThreadedTreeLikelihood$Scaling",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": true,
        "package": "beast.base.evolution.likelihood",
        "description": "Enum type for ThreadedTreeLikelihood",
        "implements": [
          "java.lang.constant.Constable",
          "java.lang.Comparable",
          "java.io.Serializable"
        ],
        "properties": [
          {
            "name": "values",
            "type": "String[]",
            "access": "read-only",
            "value": [
              "none",
              "always",
              "_default"
            ]
          }
        ],
        "arguments": []
      },
      {
        "name": "CalibratedYuleModel.Type",
        "fullyQualifiedName": "beast.base.evolution.speciation.CalibratedYuleModel$Type",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": true,
        "package": "beast.base.evolution.speciation",
        "description": "Enum type for CalibratedYuleModel",
        "implements": [
          "java.lang.constant.Constable",
          "java.lang.Comparable",
          "java.io.Serializable"
        ],
        "properties": [
          {
            "name": "values",
            "type": "String[]",
            "access": "read-only",
            "value": [
              "none",
              "full",
              "restricted"
            ]
          }
        ],
        "arguments": []
      },
      {
        "name": "DataType.Base",
        "fullyQualifiedName": "beast.base.evolution.datatype.DataType$Base",
        "isDistribution": false,
        "isAbstract": true,
        "isInterface": false,
        "isEnum": false,
        "package": "beast.base.evolution.datatype",
        "description": "Inner type of DataType",
        "extends": "beast.base.core.BEASTObject",
        "implements": [
          "beast.base.evolution.datatype.DataType",
          "beast.base.core.BEASTInterface"
        ],
        "arguments": [],
        "properties": []
      },
      {
        "name": "SpeciesTreePopFunction.TreePopSizeFunction",
        "fullyQualifiedName": "beast.base.evolution.speciation.SpeciesTreePopFunction$TreePopSizeFunction",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": true,
        "package": "beast.base.evolution.speciation",
        "description": "Enum type for SpeciesTreePopFunction",
        "implements": [
          "java.lang.constant.Constable",
          "java.lang.Comparable",
          "java.io.Serializable"
        ],
        "properties": [
          {
            "name": "values",
            "type": "String[]",
            "access": "read-only",
            "value": [
              "constant",
              "linear",
              "linear_with_constant_root"
            ]
          }
        ],
        "arguments": []
      },
      {
        "name": "Parameter.Base",
        "fullyQualifiedName": "beast.base.inference.parameter.Parameter$Base",
        "isDistribution": false,
        "isAbstract": true,
        "isInterface": false,
        "isEnum": false,
        "package": "beast.base.inference.parameter",
        "description": "Inner type of Parameter",
        "extends": "beast.base.inference.StateNode",
        "implements": [
          "beast.base.core.Loggable",
          "java.lang.Cloneable",
          "beast.base.core.Function",
          "beast.base.core.BEASTInterface",
          "beast.base.inference.parameter.Parameter"
        ],
        "arguments": [],
        "properties": []
      },
      {
        "name": "Gamma.mode",
        "fullyQualifiedName": "beast.base.inference.distribution.Gamma$mode",
        "isDistribution": false,
        "isAbstract": false,
        "isInterface": false,
        "isEnum": true,
        "package": "beast.base.inference.distribution",
        "description": "Enum type for Gamma",
        "implements": [
          "java.lang.constant.Constable",
          "java.lang.Comparable",
          "java.io.Serializable"
        ],
        "properties": [
          {
            "name": "values",
            "type": "String[]",
            "access": "read-only",
            "value": [
              "ShapeScale",
              "ShapeRate",
              "ShapeMean",
              "OneParameter"
            ]
          }
        ],
        "arguments": []
      }
    ]
  }
}